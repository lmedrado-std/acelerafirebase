========================================
File: .env
========================================


========================================
File: .vscode/settings.json
========================================
{
    "IDX.aI.enableInlineCompletion": true,
    "IDX.aI.enableCodebaseIndexing": true
}
========================================
File: README.md
========================================
# Firebase Studio

This is a NextJS starter in Firebase Studio.

To get started, take a look at src/app/page.tsx.

========================================
File: apphosting.yaml
========================================
# Settings to manage and configure a Firebase App Hosting backend.
# https://firebase.google.com/docs/app-hosting/configure

runConfig:
  # Increase this value if you'd like to automatically spin up
  # more instances in response to increased traffic.
  maxInstances: 1

========================================
File: components.json
========================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
========================================
File: next.config.ts
========================================
import type {NextConfig} from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
    ],
  },
};

export default nextConfig;

========================================
File: package.json
========================================
{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "genkit:dev": "genkit start -- tsx src/ai/dev.ts",
    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@genkit-ai/googleai": "^1.13.0",
    "@genkit-ai/next": "^1.13.0",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "embla-carousel-react": "^8.6.0",
    "firebase": "^11.9.1",
    "genkit": "^1.13.0",
    "lucide-react": "^0.475.0",
    "next": "15.3.3",
    "patch-package": "^8.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "react-markdown": "^9.0.1",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "genkit-cli": "^1.13.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

========================================
File: src/ai/dev.ts
========================================
import { config } from 'dotenv';
config();

import '@/ai/flows/generate-quiz-flow.ts';
import '@/ai/flows/generate-course-flow.ts';

========================================
File: src/ai/flows/analyze-sales-trends.ts
========================================
'use server';

/**
 * @fileOverview AI agent to analyze sales trends and identify key insights.
 *
 * - analyzeSalesTrends - A function that analyzes sales data for trends and anomalies.
 */

import {ai} from '@/ai/genkit';
import { 
  AnalyzeSalesTrendsInputSchema,
  AnalyzeSalesTrendsOutputSchema,
  type AnalyzeSalesTrendsInput,
  type AnalyzeSalesTrendsOutput,
} from '@/lib/types';


export async function analyzeSalesTrends(
  input: AnalyzeSalesTrendsInput
): Promise<AnalyzeSalesTrendsOutput> {
  return analyzeSalesTrendsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeSalesTrendsPrompt',
  input: {schema: AnalyzeSalesTrendsInputSchema},
  output: {schema: AnalyzeSalesTrendsOutputSchema},
  prompt: `You are an expert sales data analyst. Analyze the provided sales data to identify trends,
anomalies, and top-performing products.

Sales Data ({{timeFrame}}): {{{salesData}}}

Provide a summary of the sales trends, identify the top-performing products, and provide key insights
into what is driving sales performance. Be concise and clear.
`,
});

const analyzeSalesTrendsFlow = ai.defineFlow(
  {
    name: 'analyzeSalesTrendsFlow',
    inputSchema: AnalyzeSalesTrendsInputSchema,
    outputSchema: AnalyzeSalesTrendsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output) {
      throw new Error('AI failed to generate analysis. Please try again.');
    }
    return output;
  }
);

========================================
File: src/ai/flows/generate-course-flow.ts
========================================
'use server';
/**
 * @fileOverview A flow for generating training courses.
 *
 * - generateCourse - A function that creates a course on a given topic.
 */

import {ai} from '@/ai/genkit';
import {
  GenerateCourseInputSchema,
  GenerateCourseOutputSchema,
  type GenerateCourseInput,
  type GenerateCourseOutput,
} from '@/lib/types';

export async function generateCourse(
  input: GenerateCourseInput
): Promise<GenerateCourseOutput> {
  return generateCourseFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateCoursePrompt',
  input: {schema: GenerateCourseInputSchema},
  output: {schema: GenerateCourseOutputSchema},
  prompt: `
Você é um instrutor de vendas especialista e didático, criando materiais para vendedores de calçados. Sua tarefa é criar um MINI CURSO sobre o tema "{{topic}}".
Use o identificador único de geração (seed) "{{#if seed}}{{seed}}{{else}}geral{{/if}}" para garantir que o conteúdo e as perguntas do quiz sejam únicos e não se repitam.
O nível de dificuldade do conteúdo e do quiz é "{{#if dificuldade}}{{dificuldade}}{{else}}Médio{{/if}}" (Fácil, Médio ou Difícil).

O mini curso deve ter duas partes, em formato JSON:
1.  **Conteúdo Didático:** Um texto curto e objetivo (3 a 5 parágrafos) em formato Markdown. O conteúdo deve ser prático e ensinar algo útil sobre o tema.
2.  **Quiz de Verificação:** Um quiz com EXATAMENTE 3 perguntas de múltipla escolha.

Regras IMPORTANTES:
- O quiz deve ser **baseado EXCLUSIVAMENTE no conteúdo didático** que você acabou de criar. As respostas devem estar no texto.
- As perguntas do quiz devem ser **diferentes** das que seriam geradas em um quiz geral de vendas. Elas testam a leitura e compreensão do material apresentado.
- Responda **APENAS com o JSON**, sem textos adicionais ou blocos de código.

Formato da resposta:
{
  "title": "Título do curso",
  "content": "## Título do Módulo\\n\\nPrimeiro parágrafo do conteúdo...\\n\\nSegundo parágrafo com **destaques**...",
  "quiz": [
    {
      "question": "De acordo com o texto, qual é o primeiro passo para...?",
      "options": ["Opção A", "Opção B", "Opção C", "Opção D"],
      "correctAnswerIndex": 1,
      "explanation": "A explicação deve reforçar o que foi ensinado no texto."
    }
  ]
}
`,
});

const fallbackCourses: GenerateCourseOutput[] = [
  {
    title: 'Curso de Emergência: Atendimento ao Cliente',
    content:
      'Aprenda o básico para encantar seus clientes. A primeira impressão é a que fica. Um sorriso, uma saudação amigável e uma escuta atenta são as ferramentas mais poderosas de um vendedor. Lembre-se de entender a necessidade do cliente antes de oferecer um produto. Fazer as perguntas certas é mais importante do que ter todas as respostas. A chave para a venda consultiva é ouvir mais e falar menos.',
    quiz: [
      {
        question: 'Segundo o texto, qual é a primeira impressão que fica?',
        options: [
          'A do produto mais caro',
          'A primeira',
          'A da promoção',
          'A última',
        ],
        correctAnswerIndex: 1,
        explanation:
          'O texto afirma claramente que "A primeira impressão é a que fica".',
      },
      {
        question:
          'O que o material descreve como as ferramentas mais poderosas de um vendedor?',
        options: [
          'Calculadora e caneta',
          'Catálogo e tablet',
          'Sorriso, saudação e escuta atenta',
          'Argumentos de venda e persuasão',
        ],
        correctAnswerIndex: 2,
        explanation:
          'O curso menciona sorriso, saudação e escuta atenta como as ferramentas mais poderosas.',
      },
      {
        question: 'Qual é a chave para a venda consultiva mencionada no conteúdo?',
        options: [
          'Falar sobre a concorrência',
          'Ouvir mais e falar menos',
          'Decorar o manual de produtos',
          'Apressar o fechamento da venda',
        ],
        correctAnswerIndex: 1,
        explanation:
          'O texto finaliza dizendo que a chave para a venda consultiva é "ouvir mais e falar menos".',
      },
    ],
  },
  {
    title: 'Curso Padrão: Conhecendo o Produto',
    content:
      'Um bom vendedor conhece o que vende. Estude os materiais dos calçados: couro legítimo é respirável e durável, enquanto sintéticos oferecem variedade de cores e preços acessíveis. Entenda os tipos de solado: borracha para aderência, EVA para leveza e amortecimento. Saber esses detalhes transmite confiança e ajuda o cliente a fazer a melhor escolha.',
    quiz: [
      {
        question: 'Qual a principal vantagem do couro legítimo mencionada?',
        options: [
          'Ser mais barato',
          'Ter mais cores',
          'Ser respirável e durável',
          'Ser mais leve que EVA',
        ],
        correctAnswerIndex: 2,
        explanation: 'O texto destaca que couro legítimo é respirável e durável.',
      },
      {
        question: 'Para que serve um solado de borracha, de acordo com o texto?',
        options: ['Amortecimento', 'Leveza', 'Aderência', 'Variedade de cores'],
        correctAnswerIndex: 2,
        explanation:
          'O curso menciona que o solado de borracha é ideal para aderência.',
      },
      {
        question: 'O que o conhecimento do produto transmite ao cliente?',
        options: [
          'Que o produto é caro',
          'Confiança',
          'Que a loja tem muitos itens',
          'Que o vendedor é novo',
        ],
        correctAnswerIndex: 1,
        explanation:
          'Saber os detalhes do produto transmite confiança ao cliente.',
      },
    ],
  },
];

const getFallbackCourse = (): GenerateCourseOutput => {
  // Return a random fallback course
  const randomIndex = Math.floor(Math.random() * fallbackCourses.length);
  return fallbackCourses[randomIndex];
};

const generateCourseFlow = ai.defineFlow(
  {
    name: 'generateCourseFlow',
    inputSchema: GenerateCourseInputSchema,
    outputSchema: GenerateCourseOutputSchema,
  },
  async input => {
    try {
      const response = await prompt(input);

      if (response.output) {
        if (response.output.quiz.length === 0) {
          console.warn(
            '⚠️ IA retornou um curso válido mas sem quiz. Usando fallback.'
          );
          return getFallbackCourse();
        }
        return response.output;
      }

      const rawText = response.text;
      if (!rawText) {
        console.warn('⚠️ IA retornou uma resposta vazia. Usando fallback.');
        return getFallbackCourse();
      }

      const jsonRegex = /```json\n([\s\S]*?)\n```|({[\s\S]*})/;
      const match = rawText.match(jsonRegex);

      if (!match) {
        console.warn('AI response did not contain valid JSON. Using fallback.');
        return getFallbackCourse();
      }

      const jsonString = match[1] || match[2];
      const parsed = JSON.parse(jsonString);

      const validated = GenerateCourseOutputSchema.parse(parsed);

      if (validated.quiz.length === 0) {
        console.warn(
          '⚠️ IA retornou um curso válido mas sem quiz (após parse). Usando fallback.'
        );
        return getFallbackCourse();
      }

      return validated;
    } catch (error) {
      console.error('❌ Erro no fluxo de geração de curso:', error);
      console.warn('⚠️ Usando fallback local por falha na IA.');
      return getFallbackCourse();
    }
  }
);

========================================
File: src/ai/flows/generate-quiz-flow.ts
========================================
'use server';

import {ai} from '@/ai/genkit';
import {
  GenerateQuizInputSchema,
  GenerateQuizOutputSchema,
  type GenerateQuizInput,
  type GenerateQuizOutput,
} from '@/lib/types';

export async function generateQuiz(
  input: GenerateQuizInput
): Promise<GenerateQuizOutput> {
  return generateQuizFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateQuizPrompt',
  input: {schema: GenerateQuizInputSchema},
  output: {schema: GenerateQuizOutputSchema},
  prompt: `
Você é um coach de vendas criativo e exigente, especializado em calçados. Crie um QUIZ desafiador e diversificado com base no tema "{{topic}}".

- Gere EXATAMENTE {{numberOfQuestions}} perguntas.
- O nível de dificuldade é "{{difficulty}}". Adapte as perguntas e as opções de resposta para este nível.
- Use o identificador único de geração (seed): {{#if seed}}{{seed}}{{else}}geral{{/if}} para garantir a unicidade.

Regras RÍGIDAS:
1. Gere perguntas únicas e variadas com base no seed.
2. Evite repetir qualquer pergunta feita para outros vendedores no mesmo dia.
3. Não use estrutura semelhante entre as perguntas (ex: todas começando com "Qual é...").
4. Cubra áreas distintas do tema (ex: produto, abordagem, objeções, KPIs, psicologia do cliente, tendências de mercado).
5. Responda APENAS com JSON. Não inclua blocos de código ou explicações externas.

Instruções por Nível de Dificuldade:

**Nível "Fácil":**
- Perguntas devem ser diretas, focadas em conceitos básicos e fundamentais de vendas e produtos de calçados.
- As opções de resposta devem ter uma alternativa claramente correta e as demais devem ser obviamente incorretas ou distantes do tema.
- Exemplo: "Qual a principal função de um bom atendimento ao cliente?"

**Nível "Médio":**
- Perguntas devem exigir um pouco mais de raciocínio e aplicação de conceitos.
- Inclua cenários comuns do dia a dia de vendas de calçados.
- As opções de resposta devem ser mais plausíveis, exigindo um conhecimento mais aprofundado para identificar a correta.
- Exemplo: "Um cliente está indeciso entre dois modelos de tênis. Qual a melhor estratégia para ajudá-lo a decidir, focando em suas necessidades?"

**Nível "Difícil":**
- Perguntas devem ser complexas, envolvendo análise crítica, resolução de problemas e aplicação de estratégias avançadas.
- Inclua cenários desafiadores, objeções difíceis ou situações que exigem conhecimento de mercado e psicologia do consumidor.
- As opções de resposta devem ser muito próximas, exigindo um entendimento nuances e experiência prática para escolher a melhor.
- Exemplo: "Em um cenário de baixa sazonalidade, como um vendedor de calçados pode utilizar técnicas de cross-selling e up-selling para maximizar o ticket médio, sem parecer agressivo, e qual KPI seria mais impactado por essa estratégia?"

Formato da resposta:
{
  "title": "Quiz Exclusivo - Nível {{difficulty}}",
  "questions": [
    {
      "questionText": "Um cliente diz: 'Achei caro'. Qual a MELHOR resposta para contornar essa objeção sem dar desconto?",
      "options": [
        "Concordar e mostrar um mais barato",
        "Explicar que o preço é justo",
        "Perguntar 'Caro em relação a quê?' e focar no valor e benefícios do produto",
        "Dizer que a qualidade tem seu preço"
      ],
      "correctAnswerIndex": 2,
      "explanation": "Focar no valor (durabilidade, conforto, tecnologia) justifica o preço e desvia o foco do custo."
    }
  ]
}
`,
  config: {
    safetySettings: [
      {category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_NONE'},
      {category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_NONE'},
      {category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_NONE'},
      {category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_NONE'},
    ],
  },
});

const fallbackQuizzes: GenerateQuizOutput[] = [
  {
    title: 'Quiz de Técnicas de Venda - Básico',
    questions: [
      {
        questionText: 'Qual a melhor forma de abordar um cliente?',
        options: [
          'Esperar que ele fale primeiro',
          'Cumprimentar com simpatia e oferecer ajuda',
          'Segui-lo silenciosamente',
          'Falar das promoções imediatamente',
        ],
        correctAnswerIndex: 1,
        explanation: 'Uma abordagem simpática cria conexão e confiança.',
      },
      {
        questionText: 'O que caracteriza uma boa venda consultiva?',
        options: [
          'Oferecer o item mais caro',
          'Entender a necessidade do cliente',
          'Focar apenas na comissão',
          'Falar sobre todos os produtos da loja',
        ],
        correctAnswerIndex: 1,
        explanation:
          'Na venda consultiva, você ajuda o cliente com a melhor solução.',
      },
      {
        questionText:
          'Para um cliente que busca conforto, qual tipo de palmilha você recomenda?',
        options: [
          'Plana e dura',
          'Com espuma de memória (Memory Foam)',
          'De borracha simples',
          'Nenhuma',
        ],
        correctAnswerIndex: 1,
        explanation:
          'A espuma de memória se molda ao pé, oferecendo máximo conforto e absorção de impacto.',
      },
      {
        questionText:
          'Um cliente reclama que o sapato de couro está apertado. O que você diz?',
        options: [
          'Que ele vai lacear com o tempo',
          'Que ele pegou o número errado',
          'Oferece um produto para lacear o couro e explica o processo',
          'Sugere um modelo sintético',
        ],
        correctAnswerIndex: 2,
        explanation:
          'Oferecer uma solução proativa demonstra conhecimento e cuidado com o cliente, agregando valor.',
      },
      {
        questionText: "O que é 'PA' em vendas de varejo?",
        options: [
          'Produto por Atendimento',
          'Pagamento Aprovado',
          'Preço de Atacado',
          'Promoção Ativa',
        ],
        correctAnswerIndex: 0,
        explanation:
          'PA (Peças por Atendimento) é um indicador que mede a quantidade de produtos vendidos por cliente atendido.',
      },
    ],
  },
  {
    title: 'Quiz de Objeções de Clientes - Intermediário',
    questions: [
      {
        questionText: "Se um cliente diz 'Vou pensar', qual é a melhor atitude?",
        options: [
          'Deixá-lo ir embora',
          "Perguntar 'O que te impede de decidir agora?' para entender a dúvida.",
          'Oferecer um desconto para fechar na hora',
          'Anotar o contato dele',
        ],
        correctAnswerIndex: 1,
        explanation:
          "Entender a objeção real por trás do 'vou pensar' é a chave para contorná-la.",
      },
      {
        questionText:
          'Um cliente achou o mesmo produto mais barato online. O que você destaca?',
        options: [
          'O preço da concorrência',
          'A garantia, o atendimento pessoal e a possibilidade de troca fácil na loja física.',
          'Que comprar online é arriscado',
          'Que você pode cobrir a oferta',
        ],
        correctAnswerIndex: 1,
        explanation:
          'Agregar valor ao serviço da loja física justifica a diferença de preço.',
      },
      {
        questionText:
          'O que fazer se um cliente está indeciso entre dois modelos?',
        options: [
          'Escolher pelo cliente',
          'Deixá-lo sozinho para não pressionar',
          'Resumir os prós e contras de cada um com base no que ele precisa.',
          'Mostrar um terceiro modelo',
        ],
        correctAnswerIndex: 2,
        explanation:
          'Ajudar o cliente a organizar as ideias com base em suas próprias necessidades facilita a decisão.',
      },
      {
        questionText:
          'Qual indicador de performance (KPI) mede a eficiência em vender mais de um item por vez?',
        options: [
          'Ticket Médio',
          'Taxa de Conversão',
          'PA (Peças por Atendimento)',
          'Margem de Lucro',
        ],
        correctAnswerIndex: 2,
        explanation:
          'O PA (Peças por Atendimento) mede exatamente a quantidade de produtos vendidos por cliente.',
      },
      {
        questionText:
          "O cliente diz 'Não conheço essa marca'. Qual o seu primeiro passo?",
        options: [
          'Mostrar uma marca famosa',
          'Falar da história da marca e seus diferenciais de qualidade.',
          'Dizer que é uma marca nova',
          'Oferecer um desconto por ser desconhecida',
        ],
        correctAnswerIndex: 1,
        explanation:
          'Apresentar a marca e seus pontos fortes constrói confiança no produto.',
      },
    ],
  },
];

const getFallbackQuiz = (): GenerateQuizOutput => {
  const randomIndex = Math.floor(Math.random() * fallbackQuizzes.length);
  return fallbackQuizzes[randomIndex];
};

const generateQuizFlow = ai.defineFlow(
  {
    name: 'generateQuizFlow',
    inputSchema: GenerateQuizInputSchema,
    outputSchema: GenerateQuizOutputSchema,
  },
  async input => {
    try {
      const response = await prompt(input);
      console.log('📤 Resposta da IA:', response);

      if (response.output) {
        if (response.output.questions.length === 0) {
          throw new Error('AI returned a valid structure but with no questions.');
        }
        return response.output;
      }

      const rawText = response.text || '';
      const jsonRegex = /```json\n([\s\S]*?)\n```|({[\s\S]*})/;
      const match = rawText.match(jsonRegex);
      const jsonString = match?.[1] || match?.[2];

      if (!jsonString) throw new Error('JSON inválido ou ausente');

      const parsed = JSON.parse(jsonString);
      const validated = GenerateQuizOutputSchema.parse(parsed);

      if (validated.questions.length === 0) {
        throw new Error(
          'AI returned a valid structure but with no questions after parsing.'
        );
      }
      return validated;
    } catch (error) {
      console.warn('⚠️ Erro ao gerar quiz com a IA:', error);
      console.warn('📄 Retornando fallback local');
      return getFallbackQuiz();
    }
  }
);

========================================
File: src/ai/flows/send-password-reset-flow.ts
========================================
'use server';
/**
 * @fileOverview A server action for handling admin password reset requests.
 *
 * - sendPasswordReset - A function that simulates sending a password reset email to the admin.
 */

import type { Admin, PasswordResetInput, PasswordResetOutput } from '@/lib/types';

// This is the exported function that the client-side code will call.
export async function sendPasswordReset(
  input: PasswordResetInput
): Promise<PasswordResetOutput> {
  // In a real application, this user data would come from a secure database.
  // For this prototype, we are hardcoding it on the server to avoid calling
  // a client-side store from a server action.
  const adminUser: Admin = {
    nickname: 'admin',
    email: 'admin@aceleragtsupermoda.com',
    password: 'admin',
  };

  const identifier = input.identifier.toLowerCase().trim();

  if (
    identifier === adminUser.nickname.toLowerCase() ||
    (adminUser.email && identifier === adminUser.email.toLowerCase())
  ) {
    // In a real application, you would integrate with an email service here.
    // For this prototype, we simulate a successful email dispatch.
    console.log(
      `✅ Simulating password reset email sent to admin with identifier: ${input.identifier}`
    );
    console.log(`New password would be sent from: super.moda@yahoo.com.br`);

    return {
      success: true,
      message:
        'Um e-mail de redefinição de senha foi enviado para o administrador.',
    };
  } else {
    console.warn(
      `⚠️ Password reset attempt failed for identifier: ${input.identifier}`
    );
    return {
      success: false,
      message: 'Administrador não encontrado. Verifique o login ou email informado.',
    };
  }
}

========================================
File: src/ai/genkit.ts
========================================
import {genkit} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

export const ai = genkit({
  plugins: [googleAI()],
  model: 'googleai/gemini-2.0-flash',
});

========================================
File: src/app/admin/academia/page.tsx
========================================
'use client';

import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, Sparkles, BookCopy, Trash2, GraduationCap, Star, CheckCircle, XCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import ReactMarkdown from 'react-markdown';
import { generateCourse } from "@/ai/flows/generate-course-flow";
import type { Course } from '@/lib/types';
import { cn } from '@/lib/utils';
import { useAdminContext } from '@/app/admin/layout';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';

const COURSE_POINTS_CONFIG = {
  'Fácil': 100,
  'Médio': 150,
  'Difícil': 200,
} as const;

type Dificuldade = keyof typeof COURSE_POINTS_CONFIG;


// Component for a single course quiz
const CourseQuiz = ({ course, onComplete }: { course: Course; onComplete: () => void }) => {
    const [answers, setAnswers] = useState<(number | null)[]>(new Array(course.quiz.length).fill(null));
    const [submitted, setSubmitted] = useState(false);

    const handleAnswerChange = (questionIndex: number, answerIndex: number) => {
        const newAnswers = [...answers];
        newAnswers[questionIndex] = answerIndex;
        setAnswers(newAnswers);
    };

    const handleSubmit = () => {
        setSubmitted(true);
        onComplete();
    };
    
    const allQuestionsAnswered = answers.every(a => a !== null);

    return (
        <div className="space-y-6">
            <h4 className="font-semibold text-lg">Teste seus conhecimentos</h4>
            {course.quiz.map((q, qIndex) => (
                <div key={qIndex} className={cn(
                    "p-4 rounded-lg bg-input transition-all",
                    submitted && (answers[qIndex] === q.correctAnswerIndex ? 'border-2 border-green-500' : 'border-2 border-destructive')
                )}>
                    <p><strong>{qIndex + 1}. {q.question}</strong></p>
                    <RadioGroup
                        value={answers[qIndex]?.toString()}
                        onValueChange={(value) => handleAnswerChange(qIndex, parseInt(value))}
                        disabled={submitted}
                        className="mt-2 space-y-2"
                    >
                        {q.options.map((opt, oIndex) => (
                            <Label key={oIndex} htmlFor={`q${qIndex}-o${oIndex}`} className="flex items-center gap-3 p-2 rounded-md hover:bg-background/50 cursor-pointer">
                                <RadioGroupItem value={oIndex.toString()} id={`q${qIndex}-o${oIndex}`} />
                                <span>{opt}</span>
                            </Label>
                        ))}
                    </RadioGroup>
                    {submitted && (
                        <div className="mt-3 text-sm flex items-center gap-2">
                             {answers[qIndex] === q.correctAnswerIndex 
                                ? <CheckCircle className="size-4 text-green-500" />
                                : <XCircle className="size-4 text-destructive" />}
                            <p><span className="font-bold">Explicação:</span> {q.explanation}</p>
                        </div>
                    )}
                </div>
            ))}
            <Button onClick={handleSubmit} disabled={!allQuestionsAnswered || submitted}>
                {submitted ? 'Quiz Finalizado' : 'Finalizar Quiz e Concluir Curso'}
            </Button>
        </div>
    );
};


export default function AcademiaPage() {
  const { sellers, setSellers } = useAdminContext();
  const [courses, setCourses] = useState<Course[]>([]);
  const [isGeneratingCourse, setIsGeneratingCourse] = useState(false);
  const [selectedSellerId, setSelectedSellerId] = useState<string | null>(null);
  const [selectedTopic, setSelectedTopic] = useState<string>('');
  const [dificuldade, setDificuldade] = useState<Dificuldade>('Médio');
  const { toast } = useToast();

  const courseTopics = [
    'Técnicas de Atendimento ao Cliente para Lojas de Calçados',
    'Conhecimento de Materiais: Couro, Sintéticos e Tecidos',
    'Como Lidar com Objeções de Clientes e Fechar Vendas',
    'Organização de Estoque e Vitrinismo para Calçados',
    'Vendas Adicionais: Como Oferecer Meias e Produtos de Limpeza'
  ];

  const handleGenerateCourse = async () => {
     if (!selectedTopic) {
        toast({
            variant: 'destructive',
            title: 'Selecione um tópico',
            description: 'Você precisa escolher um tópico para gerar o curso.',
        });
        return;
    }
    setIsGeneratingCourse(true);
    try {
      const seed = new Date().getTime().toString();
      const result = await generateCourse({ topic: selectedTopic, seed, dificuldade });
      const points = COURSE_POINTS_CONFIG[dificuldade];
      const newCourse: Course = {
        id: new Date().getTime().toString(),
        ...result,
        points,
        dificuldade,
      };
      setCourses(prev => [newCourse, ...prev]);
      toast({
        title: "Curso Gerado com Sucesso!",
        description: `O curso "${result.title}" foi criado.`,
      });
    } catch (error) {
      console.error("Failed to generate course:", error);
      toast({
        variant: 'destructive',
        title: 'Falha ao Gerar Curso',
        description: 'A IA não conseguiu gerar o conteúdo. Um curso padrão foi carregado.',
      });
    } finally {
      setIsGeneratingCourse(false);
    }
  };

  const handleDeleteCourse = (id: string) => {
    setCourses(prev => prev.filter(c => c.id !== id));
  };

  const handleCompleteCourse = (courseId: string) => {
    if (!selectedSellerId) {
        toast({
            variant: 'destructive',
            title: 'Nenhum Vendedor Selecionado',
            description: 'Por favor, selecione um vendedor para premiar.',
        });
        return;
    }

    const today = new Date().toISOString().split('T')[0];
    const sellerToUpdate = sellers.find(s => s.id === selectedSellerId);
    const course = courses.find(c => c.id === courseId);

    if (!course) return;

    if (sellerToUpdate?.lastCourseCompletionDate === today) {
        toast({
            variant: 'destructive',
            title: 'Limite Diário Atingido',
            description: `${sellerToUpdate.name} já concluiu um curso hoje.`,
        });
        return;
    }

    setSellers(prevSellers =>
        prevSellers.map(seller =>
            seller.id === selectedSellerId
            ? { ...seller, points: seller.points + course.points, lastCourseCompletionDate: today }
            : seller
        )
    );

    toast({
        title: 'Curso Concluído!',
        description: `${sellerToUpdate?.name} ganhou ${course.points} pontos pelo curso "${course.title}".`,
    });
  };
  
  return (
    <div className="space-y-8">
      <div className="flex items-center gap-4">
        <GraduationCap className="size-8 text-primary" />
        <h1 className="text-3xl font-bold">Academia de Vendas</h1>
      </div>

      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="text-xl">Gerador de Cursos</CardTitle>
          <CardDescription>
            Selecione um tópico e um grau de dificuldade. A pontuação varia conforme o nível:
            <span className="ml-2 font-bold text-green-400">Fácil: 100pts | Médio: 150pts | Difícil: 200pts</span>
          </CardDescription>
        </CardHeader>
        <CardContent>
            <div className="flex items-end gap-4">
                <div className="space-y-2 flex-grow">
                    <Label htmlFor="course-topic-select">Tópico do Curso</Label>
                    <Select onValueChange={setSelectedTopic} value={selectedTopic}>
                        <SelectTrigger id="course-topic-select">
                            <SelectValue placeholder="Escolha um tópico..." />
                        </SelectTrigger>
                        <SelectContent>
                            {courseTopics.map((topic, index) => (
                                <SelectItem key={index} value={topic}>{topic}</SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                </div>
                <div className="space-y-2 min-w-[180px]">
                  <Label htmlFor="dificuldade-select">Dificuldade</Label>
                  <Select value={dificuldade} onValueChange={v => setDificuldade(v as Dificuldade)}>
                    <SelectTrigger id="dificuldade-select">
                      <SelectValue placeholder="Dificuldade" />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.keys(COURSE_POINTS_CONFIG).map(level => (
                        <SelectItem key={level} value={level}>{level}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <Button onClick={handleGenerateCourse} disabled={isGeneratingCourse || !selectedTopic} className="bg-gradient-to-r from-blue-500 to-purple-600 text-primary-foreground font-semibold">
                  {isGeneratingCourse ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Sparkles className="mr-2 h-4 w-4" />
                  )}
                  Gerar Curso com IA
                </Button>
            </div>
        </CardContent>
      </Card>

      <div className="space-y-4 pt-6">
        <h3 className="text-lg font-semibold">Cursos Gerados</h3>
        
        {courses.length > 0 && (
          <div className="space-y-2 max-w-sm mb-4">
            <Label htmlFor="seller-select-academia">Premiar Vendedor</Label>
            <Select onValueChange={setSelectedSellerId}>
              <SelectTrigger id="seller-select-academia">
                <SelectValue placeholder="Selecione um vendedor..." />
              </SelectTrigger>
              <SelectContent>
                {sellers.map(seller => (
                  <SelectItem key={seller.id} value={seller.id}>{seller.name}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            <p className="text-xs text-muted-foreground">Selecione um vendedor para concluir cursos e receber pontos.</p>
          </div>
        )}

        {courses.length > 0 ? (
          <div className="space-y-4">
            {courses.map((course) => (
              <Card key={course.id} className="bg-background/50">
                <CardHeader className="flex flex-row items-start justify-between">
                    <div>
                        <CardTitle>{course.title}</CardTitle>
                        <CardDescription className="flex items-center mt-2">
                           <Star className="mr-2 size-4 text-yellow-400" />
                           <span>{course.points} Pontos de Recompensa</span>
                           {course.dificuldade && <span className="ml-2 text-xs font-medium bg-secondary text-secondary-foreground px-2 py-0.5 rounded-full">{course.dificuldade}</span>}
                        </CardDescription>
                    </div>
                    <Button variant="ghost" size="icon" onClick={() => handleDeleteCourse(course.id)} aria-label="Remover curso">
                        <Trash2 className="h-4 w-4 text-destructive" />
                    </Button>
                </CardHeader>
                <CardContent className="space-y-4">
                    <div className="prose prose-sm prose-invert max-w-none text-muted-foreground">
                        <ReactMarkdown>{course.content}</ReactMarkdown>
                    </div>

                    {course.quiz && course.quiz.length > 0 && (
                        <div className="pt-6 border-t">
                            <CourseQuiz course={course} onComplete={() => handleCompleteCourse(course.id)} />
                        </div>
                    )}
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <div className="text-center text-muted-foreground border-2 border-dashed border-border rounded-lg p-8">
            <BookCopy className="mx-auto h-12 w-12 text-muted-foreground" />
            <p className="mt-4 font-semibold">Nenhum curso gerado</p>
            <p className="text-sm">Gere um novo curso com IA para começar.</p>
          </div>
        )}
      </div>
    </div>
  );
}

========================================
File: src/app/admin/dashboard/page.tsx
========================================
'use client';

import { useMemo } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Users, Trophy, DollarSign, LayoutGrid, Star, Ticket, Box, Crown } from "lucide-react";
import { useAdminContext } from '@/app/admin/layout';
import SalesOverviewChart from '@/components/SalesOverviewChart';

export default function DashboardPage() {
  const { sellers: sellersData } = useAdminContext();

  const { 
    bestSeller,
    totalSellers,
    currentSales,
    totalPoints,
    averageTicket,
    averagePA,
    pointsLeaders
  } = useMemo(() => {
    const totalSellers = sellersData.length;
    
    if (totalSellers === 0) {
      return {
        bestSeller: { name: "Nenhum", value: 0 },
        totalSellers: 0,
        currentSales: 0,
        totalPoints: 0,
        averageTicket: 0,
        averagePA: 0,
        pointsLeaders: []
      };
    }

    const currentSales = sellersData.reduce((acc, seller) => acc + seller.salesValue, 0);
    const totalPoints = sellersData.reduce((acc, seller) => acc + seller.points + seller.extraPoints, 0);
    const totalTicket = sellersData.reduce((acc, seller) => acc + seller.ticketAverage, 0);
    const totalPA = sellersData.reduce((acc, seller) => acc + seller.pa, 0);

    const bestSellerData = sellersData.reduce((prev, current) => 
      (prev.salesValue > current.salesValue) ? prev : current
    );

    const sellersSortedByPoints = [...sellersData]
      .map(s => ({ ...s, totalPoints: s.points + s.extraPoints }))
      .sort((a, b) => b.totalPoints - a.totalPoints);
    
    const pointsLeaders = sellersSortedByPoints.slice(0, 3);

    return { 
      bestSeller: { name: bestSellerData.name, value: bestSellerData.salesValue },
      totalSellers,
      currentSales,
      totalPoints,
      averageTicket: totalSellers > 0 ? totalTicket / totalSellers : 0,
      averagePA: totalSellers > 0 ? totalPA / totalSellers : 0,
      pointsLeaders
    };
  }, [sellersData]);

  return (
    <div className="space-y-8">
      <div className="flex items-center gap-4">
        <LayoutGrid className="size-8 text-primary" />
        <h1 className="text-3xl font-bold">Dashboard</h1>
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        <Card className="bg-card border-border">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Vendas Totais (Mês)
            </CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {currentSales.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
            </div>
            <p className="text-xs text-muted-foreground">
              Total de vendas da equipe
            </p>
          </CardContent>
        </Card>
        <Card className="bg-card border-border">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
             Ticket Médio (Equipe)
            </CardTitle>
            <Ticket className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {averageTicket.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}
            </div>
            <p className="text-xs text-muted-foreground">
             Média de ticket por venda
            </p>
          </CardContent>
        </Card>
        <Card className="bg-card border-border">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              PA Médio (Equipe)
            </CardTitle>
            <Box className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {averagePA.toFixed(2)}
            </div>
            <p className="text-xs text-muted-foreground">
              Média de produtos por atendimento
            </p>
          </CardContent>
        </Card>
        <Card className="bg-card border-border">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Pontos Totais da Equipe</CardTitle>
            <Star className="h-4 w-4 text-yellow-400" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {totalPoints.toLocaleString('pt-BR')}
            </div>
            <p className="text-xs text-muted-foreground">
              Soma de todos os pontos ganhos
            </p>
          </CardContent>
        </Card>
         <Card className="bg-card border-border">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Melhor Vendedor (Mês)
            </CardTitle>
            <Trophy className="h-4 w-4 text-yellow-400" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{bestSeller.name}</div>
            <p className="text-xs text-muted-foreground">
              {bestSeller.value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })} em vendas
            </p>
          </CardContent>
        </Card>
        <Card className="bg-card border-border">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Vendedores Ativos
            </CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalSellers}</div>
            <p className="text-xs text-muted-foreground">
              Total de vendedores na equipe
            </p>
          </CardContent>
        </Card>
      </div>
       <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
        <div className="lg:col-span-2">
          <SalesOverviewChart sellers={sellersData} />
        </div>
        
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Crown className="text-yellow-400" />
              <span>Destaque do Mês</span>
            </CardTitle>
            <CardDescription>
              O vendedor com mais pontos ao final do mês ganha um prêmio de R$ 100,00.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {pointsLeaders.length > 0 ? (
              <div>
                <div className="flex items-start gap-4 p-4 rounded-lg bg-primary/10 border border-primary/20">
                  <div className="flex items-center justify-center rounded-full bg-primary text-primary-foreground font-bold size-8">1º</div>
                  <div>
                    <div className="font-semibold">{pointsLeaders[0].name}</div>
                    <div className="text-sm text-primary/80">{pointsLeaders[0].totalPoints.toLocaleString('pt-BR')} pontos</div>
                  </div>
                </div>

                {pointsLeaders.length > 1 && (
                  <div className="mt-4">
                    <h4 className="mb-2 text-sm font-semibold text-muted-foreground">Na disputa pelo pódio:</h4>
                    <ul className="space-y-3">
                      {pointsLeaders.slice(1).map((seller, index) => (
                         <li key={seller.id} className="flex items-center gap-3 text-sm">
                           <div className="flex items-center justify-center rounded-full bg-muted text-muted-foreground font-bold size-7">{index + 2}º</div>
                           <div className="font-medium">{seller.name}</div>
                           <div className="ml-auto font-semibold text-muted-foreground">{seller.totalPoints.toLocaleString('pt-BR')} pts</div>
                         </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            ) : (
               <p className="text-sm text-center text-muted-foreground pt-8">Não há vendedores suficientes para a disputa.</p>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

========================================
File: src/app/admin/layout.tsx
========================================
'use client';

import * as React from 'react';
import Link from 'next/link';
import {usePathname, useRouter} from 'next/navigation';
import {
  GraduationCap,
  LayoutGrid,
  LogOut,
  Puzzle,
  Shield,
  Target,
  Trophy,
  User,
  ShoppingBag,
} from 'lucide-react';

import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuItem,
  SidebarMenuButton,
  SidebarProvider,
  SidebarTrigger,
} from '@/components/ui/sidebar';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import {Button} from '@/components/ui/button';
import {Logo} from '@/components/icons/logo';
import {cn} from '@/lib/utils';
import type {Admin, Goals, Mission, Seller} from '@/lib/types';
import {dataStore, useStore} from '@/lib/store';

interface AdminContextType {
  sellers: Seller[];
  setSellers: (updater: (prev: Seller[]) => Seller[]) => void;
  goals: Goals;
  setGoals: (updater: (prev: Goals) => Goals) => void;
  missions: Mission[];
  setMissions: (updater: (prev: Mission[]) => Mission[]) => void;
  adminUser: Admin;
  setAdminUser: (updater: (prev: Admin) => Admin) => void;
  isDirty: boolean;
  setIsDirty: (isDirty: boolean) => void;
}

const AdminContext = React.createContext<AdminContextType | null>(null);

export const useAdminContext = () => {
  const context = React.useContext(AdminContext);
  if (!context) {
    throw new Error('useAdminContext must be used within an AdminLayout');
  }
  return context;
};

const menuItems = [
  {href: '/admin/dashboard', label: 'Dashboard', icon: LayoutGrid},
  {href: '/admin/ranking', label: 'Ranking', icon: Trophy},
  {href: '/admin/missions', label: 'Missões', icon: Target},
  {href: '/admin/academia', label: 'Academia', icon: GraduationCap},
  {href: '/admin/quiz', label: 'Quiz', icon: Puzzle},
  {href: '/admin/loja', label: 'Loja', icon: ShoppingBag},
  {href: '/admin/perfil', label: 'Perfil', icon: User},
  {href: '/admin/settings', label: 'Configurações', icon: Shield},
];

export default function AdminLayout({children}: {children: React.ReactNode}) {
  const pathname = usePathname();
  const router = useRouter();
  const state = useStore(s => s);
  const [isClient, setIsClient] = React.useState(false);

  const [isDirty, setIsDirty] = React.useState(false);
  const [pendingPath, setPendingPath] = React.useState<string | null>(null);

  React.useEffect(() => {
    setIsClient(true);
  }, []);

  const contextValue = React.useMemo(() => ({
    sellers: state.sellers,
    setSellers: dataStore.setSellers,
    goals: state.goals,
    setGoals: dataStore.setGoals,
    missions: state.missions,
    setMissions: dataStore.setMissions,
    adminUser: state.adminUser,
    setAdminUser: dataStore.setAdminUser,
    isDirty,
    setIsDirty,
  }), [state.sellers, state.goals, state.missions, state.adminUser, isDirty]);

  const handleNavigate = (path: string) => {
    if (pathname === '/admin/settings' && isDirty) {
      setPendingPath(path);
    } else {
      router.push(path);
    }
  };

  const handleLogout = () => {
    const logoutPath = '/login';
    if (pathname === '/admin/settings' && isDirty) {
      setPendingPath(logoutPath);
    } else {
      if (typeof window !== 'undefined') {
        localStorage.removeItem('loggedInSellerId');
      }
      router.push(logoutPath);
    }
  };

  const handleConfirmNavigation = () => {
    if (pendingPath) {
      setIsDirty(false); // Acknowledge leaving without saving
      if (pendingPath === '/login' && typeof window !== 'undefined') {
        localStorage.removeItem('loggedInSellerId');
      }
      router.push(pendingPath);
      setPendingPath(null);
    }
  };

  return (
    <AdminContext.Provider value={contextValue}>
      <SidebarProvider>
        <div className="flex min-h-screen">
          <Sidebar
            collapsible="icon"
            className="border-r border-sidebar-border bg-sidebar"
          >
            <SidebarHeader className="p-4">
              <div className="flex items-center gap-3">
                <Logo />
                <h1 className="text-xl font-semibold text-white group-data-[collapsible=icon]:hidden">
                  Acelera GT Supermoda
                </h1>
              </div>
            </SidebarHeader>
            <SidebarContent>
              <SidebarMenu>
                {menuItems.map(item => (
                  <SidebarMenuItem key={item.label}>
                    <SidebarMenuButton
                      onClick={() => handleNavigate(item.href)}
                      isActive={pathname === item.href}
                      className={cn(
                        'data-[active=true]:bg-primary data-[active=true]:text-primary-foreground data-[active=true]:font-semibold',
                        'text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground'
                      )}
                    >
                      <item.icon className="size-5" />
                      <span className="group-data-[collapsible=icon]:hidden">
                        {item.label}
                      </span>
                    </SidebarMenuButton>
                  </SidebarMenuItem>
                ))}
              </SidebarMenu>
            </SidebarContent>
            <SidebarFooter className="p-4 space-y-4">
              <div className="flex items-center justify-end group-data-[collapsible=icon]:justify-center">
                {isClient && (
                  <Button
                    onClick={handleLogout}
                    variant="secondary"
                    className="group-data-[collapsible=icon]:hidden bg-sidebar-accent hover:bg-sidebar-accent/80 text-sidebar-accent-foreground"
                  >
                    <LogOut />
                    Sair
                  </Button>
                )}
              </div>
            </SidebarFooter>
          </Sidebar>
          <div className="flex flex-col flex-1">
            <header className="md:hidden flex items-center justify-between p-4 border-b">
              <div className="flex items-center gap-2">
                <Logo />
                <h1 className="text-lg font-semibold text-white">Acelera GT Supermoda</h1>
              </div>
              <SidebarTrigger />
            </header>
            <main className="flex-1 p-4 sm:p-6 md:p-8 bg-background">
              {children}
            </main>
          </div>
        </div>
      </SidebarProvider>
      <AlertDialog
        open={!!pendingPath}
        onOpenChange={() => setPendingPath(null)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Você tem alterações não salvas</AlertDialogTitle>
            <AlertDialogDescription>
              Tem certeza de que deseja sair? Suas alterações serão perdidas.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancelar</AlertDialogCancel>
            <AlertDialogAction onClick={handleConfirmNavigation}>
              Sair
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </AdminContext.Provider>
  );
}

========================================
File: src/app/admin/loja/page.tsx
========================================
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { ShoppingBag } from "lucide-react";

export default function LojaPage() {
  return (
    <div className="space-y-8">
      <div className="flex items-center gap-4">
        <ShoppingBag className="size-8 text-primary" />
        <h1 className="text-3xl font-bold">Loja de Prêmios</h1>
      </div>
      <Card className="bg-card border-border">
        <CardHeader>
            <CardTitle>Em Breve</CardTitle>
            <CardDescription>A loja de prêmios está sendo preparada!</CardDescription>
        </CardHeader>
        <CardContent>
            <div className="text-center text-muted-foreground border-2 border-dashed border-border rounded-lg p-12">
              <ShoppingBag className="mx-auto h-12 w-12 text-muted-foreground" />
              <p className="mt-4 font-semibold">Funcionalidade em desenvolvimento.</p>
              <p className="text-sm">
                Em breve você poderá trocar seus pontos por prêmios incríveis.
              </p>
            </div>
        </CardContent>
      </Card>
    </div>
  );
}

========================================
File: src/app/admin/missions/page.tsx
========================================
'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Target, Star, Calendar, Trash2, CalendarIcon } from 'lucide-react';
import { useAdminContext } from '@/app/admin/layout';
import { format } from 'date-fns';
import type { Mission } from '@/lib/types';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Calendar as CalendarComponent } from '@/components/ui/calendar';
import { cn } from '@/lib/utils';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

export default function MissionsPage() {
  const { missions, setMissions } = useAdminContext();
  const [missionName, setMissionName] = useState('');
  const [missionDescription, setMissionDescription] = useState('');
  const [missionRewardValue, setMissionRewardValue] = useState('');
  const [missionRewardType, setMissionRewardType] = useState<'points' | 'cash'>('points');
  const [missionStartDate, setMissionStartDate] = useState<Date>();
  const [missionEndDate, setMissionEndDate] = useState<Date>();

  const handleAddMission = (e: React.FormEvent) => {
    e.preventDefault();
    if (!missionName.trim() || !missionRewardValue || !missionStartDate || !missionEndDate) return;

    const newMission: Mission = {
      id: new Date().getTime().toString(),
      name: missionName,
      description: missionDescription,
      rewardValue: parseInt(missionRewardValue, 10),
      rewardType: missionRewardType,
      startDate: missionStartDate,
      endDate: missionEndDate,
    };
    setMissions(prev => [...prev, newMission]);
    setMissionName('');
    setMissionDescription('');
    setMissionRewardValue('');
    setMissionRewardType('points');
    setMissionStartDate(undefined);
    setMissionEndDate(undefined);
  };

  const handleDeleteMission = (id: string) => {
    setMissions(prev => prev.filter(m => m.id !== id));
  };
  
  const formatReward = (mission: Mission) => {
    if (mission.rewardType === 'cash') {
      return mission.rewardValue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
    }
    return `${mission.rewardValue} pts`;
  }

  return (
    <div className="space-y-8">
      <div className="flex items-center gap-4">
        <Target className="size-8 text-primary" />
        <h1 className="text-3xl font-bold">Gerenciamento de Missões</h1>
      </div>

      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="text-xl">Criar Nova Missão</CardTitle>
          <CardDescription>Crie e gerencie as missões para os vendedores.</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleAddMission} className="space-y-4">
            <div className="grid md:grid-cols-3 gap-4">
              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="missionName">Nome da Missão</Label>
                <Input id="missionName" placeholder="Ex: Vender 5 Pares do Modelo X" className="bg-input" value={missionName} onChange={(e) => setMissionName(e.target.value)} required />
              </div>
              <div className="space-y-2">
                <Label htmlFor="missionRewardType">Tipo de Recompensa</Label>
                 <Select value={missionRewardType} onValueChange={(value) => setMissionRewardType(value as 'points' | 'cash')}>
                  <SelectTrigger id="missionRewardType">
                    <SelectValue placeholder="Selecione..." />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="points">Pontos</SelectItem>
                    <SelectItem value="cash">Dinheiro (R$)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
             <div className="grid md:grid-cols-2 gap-4">
               <div className="space-y-2">
                 <Label htmlFor="missionDescription">Descrição da Missão</Label>
                 <Textarea id="missionDescription" placeholder="Descreva o objetivo da missão." className="bg-input" rows={2} value={missionDescription} onChange={(e) => setMissionDescription(e.target.value)} />
               </div>
                <div className="space-y-2">
                  <Label htmlFor="missionRewardValue">
                    {missionRewardType === 'points' ? 'Pontos de Recompensa' : 'Valor do Prêmio (R$)'}
                  </Label>
                  <Input id="missionRewardValue" placeholder="Ex: 200" type="number" className="bg-input" value={missionRewardValue} onChange={(e) => setMissionRewardValue(e.target.value)} required />
                </div>
            </div>
            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="missionStartDate">Data de Início</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button id="missionStartDate" variant={'outline'} className={cn('w-full justify-start text-left font-normal bg-input', !missionStartDate && 'text-muted-foreground')}>
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {missionStartDate ? format(missionStartDate, 'PPP') : <span>Escolha uma data</span>}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0"><CalendarComponent mode="single" selected={missionStartDate} onSelect={setMissionStartDate} initialFocus /></PopoverContent>
                </Popover>
              </div>
              <div className="space-y-2">
                <Label htmlFor="missionEndDate">Data de Fim</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button id="missionEndDate" variant={'outline'} className={cn('w-full justify-start text-left font-normal bg-input', !missionEndDate && 'text-muted-foreground')}>
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {missionEndDate ? format(missionEndDate, 'PPP') : <span>Escolha uma data</span>}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0"><CalendarComponent mode="single" selected={missionEndDate} onSelect={setMissionEndDate} initialFocus disabled={{ before: missionStartDate }} /></PopoverContent>
                </Popover>
              </div>
            </div>
            <Button type="submit" className="bg-gradient-to-r from-blue-500 to-purple-600 text-primary-foreground font-semibold">
              Criar Nova Missão
            </Button>
          </form>
        </CardContent>
      </Card>
      
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle>Missões Ativas</CardTitle>
          <CardDescription>
            Visualize todas as missões disponíveis para os vendedores.
          </CardDescription>
        </CardHeader>
        <CardContent>
          {missions.length > 0 ? (
             <div className="rounded-md border border-border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Missão</TableHead>
                    <TableHead>Período</TableHead>
                    <TableHead className="text-center">Recompensa</TableHead>
                    <TableHead className="text-center">Ações</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {missions.map((mission) => (
                    <TableRow key={mission.id}>
                      <TableCell className="font-medium">{mission.name}</TableCell>
                      <TableCell>{format(mission.startDate, 'dd/MM/yy')} - {format(mission.endDate, 'dd/MM/yy')}</TableCell>
                      <TableCell className="text-center font-semibold">{formatReward(mission)}</TableCell>
                      <TableCell className="text-center">
                        <Button variant="ghost" size="icon" onClick={() => handleDeleteMission(mission.id)} aria-label="Remover missão">
                          <Trash2 className="h-4 w-4 text-destructive" />
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          ) : (
            <div className="text-center text-muted-foreground border-2 border-dashed border-border rounded-lg p-12">
              <Target className="mx-auto h-12 w-12 text-muted-foreground" />
              <p className="mt-4 font-semibold">Nenhuma missão encontrada</p>
              <p className="text-sm">
                Crie uma nova missão no formulário acima.
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

========================================
File: src/app/admin/page.tsx
========================================
import { redirect } from 'next/navigation';

export default function AdminRootPage() {
  redirect('/admin/dashboard');
  return null;
}

========================================
File: src/app/admin/perfil/page.tsx
========================================
'use client'

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { UserCog, ShieldCheck } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useAdminContext } from "../layout";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

export default function PerfilPage() {
    const { toast } = useToast();
    const { sellers, setSellers, adminUser, setAdminUser } = useAdminContext();
    
    // State for seller management
    const [selectedSellerId, setSelectedSellerId] = useState<string | null>(null);
    const [sellerNickname, setSellerNickname] = useState('');
    const [sellerPassword, setSellerPassword] = useState('');
    
    const selectedSeller = sellers.find(s => s.id === selectedSellerId);

    useEffect(() => {
        if (selectedSeller) {
            setSellerNickname(selectedSeller.nickname || '');
            setSellerPassword(selectedSeller.password || '');
        } else {
            setSellerNickname('');
            setSellerPassword('');
        }
    }, [selectedSellerId, selectedSeller]);

    const handleSellerSelect = (sellerId: string) => {
        setSelectedSellerId(sellerId);
    };

    const handleSellerSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if (!selectedSellerId) {
            toast({
                variant: 'destructive',
                title: 'Nenhum Vendedor Selecionado',
                description: 'Por favor, selecione um vendedor para atualizar.',
            });
            return;
        }

        setSellers(prevSellers => 
            prevSellers.map(seller => 
                seller.id === selectedSellerId 
                    ? { ...seller, nickname: sellerNickname, password: sellerPassword }
                    : seller
            )
        );

        toast({
            title: 'Perfil do Vendedor Atualizado!',
            description: `As informações de ${selectedSeller?.name} foram salvas com sucesso.`,
        });
    };

    // State for admin management
    const [adminNickname, setAdminNickname] = useState(adminUser.nickname);
    const [adminPassword, setAdminPassword] = useState(adminUser.password);
    const [adminEmail, setAdminEmail] = useState(adminUser.email || '');

    const handleAdminSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        setAdminUser(() => ({
            nickname: adminNickname,
            email: adminEmail,
            password: adminPassword,
        }));
        toast({
            title: 'Perfil de Administrador Atualizado!',
            description: 'Suas informações de acesso foram salvas com sucesso.',
        });
    };


  return (
    <div className="space-y-8">
      <div className="flex items-center gap-4">
        <UserCog className="size-8 text-primary" />
        <h1 className="text-3xl font-bold">Gerenciar Perfis</h1>
      </div>

      <Card className="bg-card border-border max-w-2xl">
        <CardHeader>
            <CardTitle className="flex items-center gap-2">
                <ShieldCheck className="size-6" />
                <span>Perfil do Administrador</span>
            </CardTitle>
            <CardDescription>Edite suas informações de acesso à plataforma.</CardDescription>
        </CardHeader>
        <CardContent>
            <form onSubmit={handleAdminSubmit} className="space-y-6">
                 <div className="space-y-2">
                    <Label htmlFor="adminNickname">Login (Nickname)</Label>
                    <Input id="adminNickname" type="text" placeholder="Nickname do administrador" value={adminNickname} onChange={(e) => setAdminNickname(e.target.value)} className="bg-input" required />
                </div>
                 <div className="space-y-2">
                    <Label htmlFor="adminEmail">Email (Opcional)</Label>
                    <Input id="adminEmail" type="email" placeholder="seu@email.com" value={adminEmail} onChange={(e) => setAdminEmail(e.target.value)} className="bg-input" />
                </div>
                <div className="space-y-2">
                    <Label htmlFor="adminPassword">Nova Senha</Label>
                    <Input id="adminPassword" type="password" value={adminPassword} onChange={(e) => setAdminPassword(e.target.value)} className="bg-input" placeholder="Defina sua senha" required />
                </div>
                <div className="flex justify-end">
                    <Button type="submit">Salvar Perfil de Admin</Button>
                </div>
            </form>
        </CardContent>
      </Card>

      <Card className="bg-card border-border max-w-2xl">
        <CardHeader>
            <CardTitle>Perfis de Vendedores</CardTitle>
            <CardDescription>Selecione um vendedor para editar seu login e senha.</CardDescription>
        </CardHeader>
        <CardContent>
            <form onSubmit={handleSellerSubmit} className="space-y-6">
                 <div className="space-y-2">
                    <Label htmlFor="seller-select">Selecionar Vendedor</Label>
                    <Select onValueChange={handleSellerSelect} value={selectedSellerId || ""}>
                        <SelectTrigger id="seller-select">
                            <SelectValue placeholder="Escolha um vendedor..." />
                        </SelectTrigger>
                        <SelectContent>
                            {sellers.map(seller => (
                                <SelectItem key={seller.id} value={seller.id}>{seller.name}</SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                </div>
                
                {selectedSellerId && (
                    <>
                        <div className="space-y-2">
                            <Label htmlFor="nickname">Login (Nickname)</Label>
                            <Input id="nickname" type="text" placeholder="Nickname do vendedor" value={sellerNickname} onChange={(e) => setSellerNickname(e.target.value)} className="bg-input" />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="password">Nova Senha</Label>
                            <Input id="password" type="text" value={sellerPassword} onChange={(e) => setSellerPassword(e.target.value)} className="bg-input" placeholder="Defina a senha do vendedor" />
                        </div>
                        <div className="flex justify-end">
                            <Button type="submit">Salvar Perfil do Vendedor</Button>
                        </div>
                    </>
                )}
            </form>
        </CardContent>
      </Card>
    </div>
  );
}

========================================
File: src/app/admin/quiz/page.tsx
========================================
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import Quiz from "@/components/quiz";
import { Puzzle } from "lucide-react";

export default function QuizPage() {
  return (
    <div className="space-y-8">
       <div className="flex items-center gap-4">
        <Puzzle className="size-8 text-primary" />
        <h1 className="text-3xl font-bold">Quizzes</h1>
      </div>
      <Card className="bg-card border-border">
         <CardHeader>
          <CardTitle className="text-xl">Teste seus Conhecimentos</CardTitle>
          <CardDescription>
            Gere quizzes aleatórios sobre técnicas de venda e conhecimento de produtos em lojas de calçados.
          </CardDescription>
        </CardHeader>
        <CardContent>
            <Quiz />
        </CardContent>
      </Card>
    </div>
  );
}

========================================
File: src/app/admin/ranking/page.tsx
========================================
'use client';

import React, { useState, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Trophy, Medal, Award, DollarSign, Ticket, Box, Star } from 'lucide-react';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { useAdminContext } from '@/app/admin/layout';
import type { Goals, GoalLevel as GoalLevelType, Seller, SalesValueGoals } from '@/lib/types';
import { Progress } from '@/components/ui/progress';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { cn } from '@/lib/utils';

type RankingCriterion = 'salesValue' | 'ticketAverage' | 'pa' | 'points' | 'totalPrize';
type GoalLevelName = 'Nenhuma' | 'Metinha' | 'Meta' | 'Metona' | 'Lendária';

const goalLevelConfig: Record<GoalLevelName, { label: string; className: string }> = {
  'Nenhuma': { label: 'Nenhuma', className: 'bg-muted border-transparent text-muted-foreground hover:bg-muted' },
  'Metinha': { label: 'Metinha', className: 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20' },
  'Meta': { label: 'Meta', className: 'bg-green-500/10 text-green-500 border-green-500/20' },
  'Metona': { label: 'Metona', className: 'bg-blue-500/10 text-blue-400 border-blue-500/20' },
  'Lendária': { label: 'Lendária', className: 'bg-purple-500/10 text-purple-400 border-purple-500/20' },
};

export default function RankingPage() {
  const [criterion, setCriterion] = useState<RankingCriterion>('salesValue');
  const { sellers: sellersData, goals: goalsData } = useAdminContext();

  const sortedSellers = useMemo(() => {
    const sellersWithPrizes = sellersData.map(seller => {
        const prizes: Record<keyof Omit<Goals, 'salesValue'> | 'salesValue', number> = {
            salesValue: 0,
            ticketAverage: 0,
            pa: 0,
            points: 0,
        };

        const allCriteria: Array<keyof Goals> = ['salesValue', 'ticketAverage', 'pa', 'points'];
        
        allCriteria.forEach(crit => {
            const goals = goalsData[crit];
            const sellerValue = crit === 'points' ? seller.points + seller.extraPoints : seller[crit];

            let currentPrize = 0;
            if (sellerValue >= goals.metinha.threshold) currentPrize += goals.metinha.prize;
            if (sellerValue >= goals.meta.threshold) currentPrize += goals.meta.prize;
            if (sellerValue >= goals.metona.threshold) currentPrize += goals.metona.prize;
            if (sellerValue >= goals.lendaria.threshold) currentPrize += goals.lendaria.prize;

            // Add performance bonus only if criterion is salesValue
            if (crit === 'salesValue') {
                const salesGoals = goals as SalesValueGoals;
                if (seller.salesValue > salesGoals.lendaria.threshold && salesGoals.performanceBonus && salesGoals.performanceBonus.per > 0) {
                    const excessSales = seller.salesValue - salesGoals.lendaria.threshold;
                    const bonusUnits = Math.floor(excessSales / salesGoals.performanceBonus.per);
                    currentPrize += bonusUnits * salesGoals.performanceBonus.prize;
                }
            }
            prizes[crit] = currentPrize;
        });

        const totalPrize = Object.values(prizes).reduce((sum, p) => sum + p, 0);

        return { ...seller, prizes, totalPrize };
    });

    return sellersWithPrizes.sort((a, b) => {
        if (criterion === 'totalPrize') {
          return b.totalPrize - a.totalPrize;
        }
        if (criterion === 'points') {
            return (b.points + b.extraPoints) - (a.points + a.extraPoints);
        }
        return b[criterion] - a[criterion];
    });
  }, [sellersData, goalsData, criterion]);
  
  const getCriterionLabel = (currentCriterion: RankingCriterion) => {
    switch (currentCriterion) {
      case 'salesValue':
        return 'Valor de Venda';
      case 'ticketAverage':
        return 'Ticket Médio';
      case 'pa':
        return 'PA';
      case 'points':
        return 'Pontos';
      case 'totalPrize':
        return 'Prêmio Total';
      default:
        return '';
    }
  };

  const formatValue = (value: number, currentCriterion: RankingCriterion) => {
    if (currentCriterion === 'pa') {
        return value.toFixed(1);
    }
    if (currentCriterion === 'points') {
        return value.toLocaleString('pt-BR');
    }
    return `R$ ${value.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  };
  
  const formatPrize = (value: number) => {
     return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
  }

  const getGoalProgress = (value: number, criterion: RankingCriterion) => {
    if (criterion === 'totalPrize') return { percent: 100, label: 'N/A', details: 'N/A'};
    const goals = goalsData[criterion];
    let nextGoal, currentGoalBase, nextGoalLabel, progress;

    if (value >= goals.lendaria.threshold) {
      return { percent: 100, label: `Nível Lendário Atingido!`, details: `${formatValue(value, criterion)}` };
    }
    if (value >= goals.metona.threshold) {
      nextGoal = goals.lendaria.threshold;
      currentGoalBase = goals.metona.threshold;
      nextGoalLabel = 'Lendária';
    } else if (value >= goals.meta.threshold) {
      nextGoal = goals.metona.threshold;
      currentGoalBase = goals.meta.threshold;
      nextGoalLabel = 'Metona';
    } else if (value >= goals.metinha.threshold) {
      nextGoal = goals.meta.threshold;
      currentGoalBase = goals.metinha.threshold;
      nextGoalLabel = 'Meta';
    } else {
      nextGoal = goals.metinha.threshold;
      currentGoalBase = 0;
      nextGoalLabel = 'Metinha';
    }

    if (nextGoal - currentGoalBase <= 0) {
      progress = 100;
    } else {
      progress = Math.min(100, ((value - currentGoalBase) / (nextGoal - currentGoalBase)) * 100);
    }
    
    return { 
      percent: progress, 
      label: `Próximo Nível: ${nextGoalLabel}`,
      details: `${formatValue(value, criterion)} / ${formatValue(nextGoal, criterion)}`
    };
  };
  
  const getRankIndicator = (index: number) => {
    if (index === 0) return <Trophy className="h-6 w-6 text-yellow-400" />;
    if (index === 1) return <Medal className="h-6 w-6 text-gray-400" />;
    if (index === 2) return <Award className="h-6 w-6 text-orange-400" />;
    return <span className="font-bold text-lg text-muted-foreground">{index + 1}</span>;
  };

  return (
    <div className="space-y-8">
       <div className="flex items-center gap-4">
        <Trophy className="size-8 text-primary" />
        <h1 className="text-3xl font-bold">Ranking de Vendedores</h1>
      </div>
      
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle>Filtros do Ranking</CardTitle>
          <CardDescription>Selecione o critério para visualizar a classificação dos vendedores.</CardDescription>
        </CardHeader>
        <CardContent>
            <div>
                <Label className="text-sm font-medium mb-2 block">Critério de Classificação</Label>
                <Tabs value={criterion} onValueChange={(value) => setCriterion(value as RankingCriterion)}>
                    <TabsList className="grid w-full grid-cols-5 bg-input p-1 h-auto">
                        <TabsTrigger value="salesValue" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground rounded-md">
                            <DollarSign className="mr-2 size-4" /> Vendas
                        </TabsTrigger>
                        <TabsTrigger value="ticketAverage" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground rounded-md">
                            <Ticket className="mr-2 size-4" /> Ticket Médio
                        </TabsTrigger>
                        <TabsTrigger value="pa" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground rounded-md">
                            <Box className="mr-2 size-4" /> PA
                        </TabsTrigger>
                          <TabsTrigger value="points" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground rounded-md">
                            <Star className="mr-2 size-4" /> Pontos
                        </TabsTrigger>
                         <TabsTrigger value="totalPrize" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground rounded-md">
                            <Trophy className="mr-2 size-4" /> Prêmio Total
                        </TabsTrigger>
                    </TabsList>
                </Tabs>
            </div>
        </CardContent>
      </Card>
      
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle>Classificação por {getCriterionLabel(criterion)}</CardTitle>
           <CardDescription>
              Visualizando a classificação dos vendedores com base nos dados mais recentes.
           </CardDescription>
        </CardHeader>
        <CardContent>
           <div className="rounded-md border border-border">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[100px] text-center">Posição</TableHead>
                      <TableHead>Vendedor</TableHead>
                       <TableHead className="text-right">
                        <div className="flex items-center justify-end gap-2">
                            <span>Prêmios (R$)</span>
                            <Award className="size-4 text-green-400" />
                        </div>
                      </TableHead>
                      {criterion !== 'totalPrize' && (
                        <>
                          <TableHead className="w-[320px] text-center">Nível da Meta</TableHead>
                          <TableHead className="w-[300px]">Progresso da Meta</TableHead>
                        </>
                      )}
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {sortedSellers.map((seller, index) => {
                      const sellerValue = criterion === 'totalPrize' 
                        ? seller.totalPrize
                        : (criterion === 'points' ? seller.points + seller.extraPoints : seller[criterion]);

                      const criterionGoals = criterion !== 'totalPrize' ? goalsData[criterion] : null;
                      
                      const allGoals: Array<{ name: GoalLevelName; threshold: number; prize: number }> = criterionGoals ? [
                        { name: 'Metinha', ...criterionGoals.metinha },
                        { name: 'Meta', ...criterionGoals.meta },
                        { name: 'Metona', ...criterionGoals.metona },
                        { name: 'Lendária', ...criterionGoals.lendaria },
                      ] : [];

                      const { percent, label, details } = getGoalProgress(sellerValue, criterion);
                      
                      const prizeToDisplay = criterion === 'totalPrize' 
                        ? seller.totalPrize 
                        : (seller.prizes[criterion as keyof typeof seller.prizes] || 0);

                      return (
                        <TableRow key={seller.id} className={index < 3 ? 'bg-card-foreground/5' : ''}>
                          <TableCell className="font-bold text-lg flex justify-center items-center h-full py-4">
                            {getRankIndicator(index)}
                          </TableCell>
                          <TableCell className="font-medium">{seller.name}</TableCell>
                           <TableCell className="text-right font-semibold text-green-400">
                            {formatPrize(prizeToDisplay)}
                          </TableCell>
                          {criterion !== 'totalPrize' && criterionGoals && (
                            <>
                              <TableCell className="text-center">
                                <div className="flex justify-center items-center gap-1.5 flex-wrap">
                                  {allGoals.map((goal) => {
                                    const isAchieved = sellerValue >= goal.threshold;
                                    const config = goalLevelConfig[goal.name];
                                    return (
                                      <TooltipProvider key={goal.name}>
                                        <Tooltip>
                                          <TooltipTrigger asChild>
                                            <Badge
                                              className={cn(
                                                'transition-all duration-300 ease-in-out',
                                                isAchieved
                                                  ? `${config.className} scale-110 border-2 border-current shadow-lg`
                                                  : 'bg-muted border-transparent text-muted-foreground opacity-60 hover:bg-muted'
                                              )}
                                            >
                                              {goal.name}
                                            </Badge>
                                          </TooltipTrigger>
                                          <TooltipContent>
                                            <div className="space-y-1 text-xs text-left">
                                              <p className="font-semibold">{goal.name}</p>
                                              <p>Meta: {formatValue(goal.threshold, criterion)}</p>
                                              <p>Prêmio: <span className="font-bold text-green-400">{formatPrize(goal.prize)}</span></p>
                                              {criterion === 'salesValue' && goal.name === 'Lendária' && goalsData.salesValue.performanceBonus && (
                                                <p className="text-xs italic text-primary/80 pt-1 border-t border-border/20 mt-1">
                                                    Bônus: +{formatPrize(goalsData.salesValue.performanceBonus.prize)} a cada {formatPrize(goalsData.salesValue.performanceBonus.per)} extra
                                                </p>
                                              )}
                                              <p>Seu valor: {formatValue(sellerValue, criterion)}</p>
                                              <p className={cn("font-bold", isAchieved ? 'text-green-400' : 'text-yellow-400')}>
                                                {isAchieved ? 'Atingida!' : 'Pendente'}
                                              </p>
                                            </div>
                                          </TooltipContent>
                                        </Tooltip>
                                      </TooltipProvider>
                                    );
                                  })}
                                </div>
                              </TableCell>
                              <TableCell>
                                <TooltipProvider>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <div className="flex flex-col gap-1.5 text-left w-full">
                                        <div className="flex justify-between items-center">
                                          <span className="text-sm font-medium">{label}</span>
                                          <span className="text-sm font-bold">{percent.toFixed(0)}%</span>
                                        </div>
                                        <Progress value={percent} className="h-3 [&>div]:bg-gradient-to-r [&>div]:from-primary [&>div]:to-purple-500" />
                                      </div>
                                    </TooltipTrigger>
                                    <TooltipContent>
                                      <p>{details}</p>
                                    </TooltipContent>
                                  </Tooltip>
                                </TooltipProvider>
                              </TableCell>
                            </>
                          )}
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
            </div>
        </CardContent>
      </Card>
    </div>
  );
}

========================================
File: src/app/admin/settings/page.tsx
========================================
'use client';

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Users, Trash2, Flag, Shield, Info, ClipboardList, Trophy } from "lucide-react";
import React, { useState, useEffect } from "react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { useAdminContext } from '@/app/admin/layout';
import type { Seller, Goals, GoalLevels } from '@/lib/types';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import { useToast } from "@/hooks/use-toast";

const goalLevels: Array<{key: keyof GoalLevels, label: string}> = [
    { key: 'metinha', label: 'Metinha'},
    { key: 'meta', label: 'Meta'},
    { key: 'metona', label: 'Metona'},
    { key: 'lendaria', label: 'Lendária'},
];

export default function SettingsPage() {
  const { sellers, setSellers, goals, setGoals, isDirty, setIsDirty } = useAdminContext();
  const { toast } = useToast();
  
  // Local state for editing to avoid applying changes immediately
  const [localSellers, setLocalSellers] = useState<Seller[]>([]);
  const [localGoals, setLocalGoals] = useState<Goals>(goals);
  
  const [newSeller, setNewSeller] = useState({ name: '', nickname: '', password: '' });
  
  // Sync local state when global state changes
  useEffect(() => {
    setLocalSellers(JSON.parse(JSON.stringify(sellers)));
  }, [sellers]);

  useEffect(() => {
    setLocalGoals(JSON.parse(JSON.stringify(goals)));
  }, [goals]);

  // Check for unsaved changes and update the context
  useEffect(() => {
    // Deep compare using JSON stringify. It's simple and effective for this data structure.
    const hasUnsavedChanges = JSON.stringify(localSellers) !== JSON.stringify(sellers) || JSON.stringify(localGoals) !== JSON.stringify(goals);
    
    // Only update if the state is different to avoid unnecessary re-renders
    if (hasUnsavedChanges !== isDirty) {
        setIsDirty(hasUnsavedChanges);
    }
  }, [localSellers, localGoals, sellers, goals, isDirty, setIsDirty]);

  // Handle browser-level navigation (closing tab, refresh)
  useEffect(() => {
    const handleBeforeUnload = (event: BeforeUnloadEvent) => {
      if (isDirty) {
        event.preventDefault();
        // Most browsers require returnValue to be set.
        event.returnValue = '';
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [isDirty]);


  const handleGoalChange = (
    criterion: keyof Goals,
    level: keyof GoalLevels,
    field: 'threshold' | 'prize',
    value: string
  ) => {
    setLocalGoals(prev => ({
      ...prev,
      [criterion]: {
        ...prev[criterion],
        [level]: {
          ...prev[criterion][level],
          [field]: parseFloat(value) || 0,
        },
      },
    }));
  };

  const handlePerformanceBonusChange = (
    field: 'per' | 'prize',
    value: string
  ) => {
    setLocalGoals(prev => ({
      ...prev,
      salesValue: {
        ...prev.salesValue,
        performanceBonus: {
          ...(prev.salesValue.performanceBonus ?? { per: 0, prize: 0 }),
          [field]: parseFloat(value) || 0,
        },
      },
    }));
  };

  const handleAddSeller = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!newSeller.name.trim() || !newSeller.nickname.trim() || !newSeller.password.trim()) return;

    const newSellerData: Seller = {
      id: new Date().getTime().toString(),
      name: newSeller.name,
      nickname: newSeller.nickname,
      password: newSeller.password,
      email: `${newSeller.nickname.toLowerCase()}@example.com`,
      salesValue: 0,
      ticketAverage: 0,
      pa: 0,
      points: 0,
      extraPoints: 0,
    };
    setLocalSellers(prevSellers => [...prevSellers, newSellerData]);
    setNewSeller({ name: '', nickname: '', password: '' });
  };
  
   const handleSellerCredsUpdate = (id: string, field: 'nickname' | 'password', value: string) => {
    setLocalSellers(prevSellers =>
      prevSellers.map(seller => 
        seller.id === id ? { ...seller, [field]: value } : seller
      )
    );
  };

  const handleSellerPerfUpdate = (id: string, field: keyof Omit<Seller, 'id' | 'name' | 'nickname' | 'password' | 'email'>, value: string) => {
    setLocalSellers(prevSellers =>
      prevSellers.map(seller => {
        if (seller.id !== id) return seller;
        return { ...seller, [field]: parseFloat(value) || 0 };
      })
    );
  };

  const handleDeleteSeller = (id: string) => {
    setLocalSellers(prevSellers => prevSellers.filter(seller => seller.id !== id));
  };
  
  const handleSaveChanges = () => {
    setSellers(() => localSellers);
    setGoals(() => localGoals);
     toast({
        title: "Alterações Salvas!",
        description: "Suas configurações foram atualizadas com sucesso.",
    });
  }

  return (
    <div className="space-y-8">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
            <Shield className="size-8 text-primary" />
            <h1 className="text-3xl font-bold">Configurações Gerais</h1>
        </div>
      </div>

      <Tabs defaultValue="lancamentos" className="w-full">
        <div className="flex items-center gap-4">
          <TabsList className="bg-card p-1 h-auto">
            <TabsTrigger value="lancamentos" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground rounded-md">
              <ClipboardList className="mr-2 size-5" /> Lançamentos
            </TabsTrigger>
             <TabsTrigger value="vendedores" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground rounded-md">
              <Users className="mr-2 size-5" /> Vendedores
            </TabsTrigger>
             <TabsTrigger value="metas" className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground rounded-md">
              <Flag className="mr-2 size-5" /> Metas
            </TabsTrigger>
          </TabsList>
        </div>
        
        <TabsContent value="lancamentos" className="space-y-6 mt-4">
          <Card className="bg-card border-border">
            <CardHeader>
              <CardTitle className="text-xl">Lançamento de Vendas</CardTitle>
              <CardDescription>Insira aqui os totais acumulados de vendas e outros indicadores de performance para cada vendedor.</CardDescription>
            </CardHeader>
            <CardContent>
                 {localSellers.length > 0 ? (
                  <div className="rounded-md border border-border">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Vendedor</TableHead>
                          <TableHead className="text-right">Valor de Venda (R$)</TableHead>
                          <TableHead className="text-right">Ticket Médio (R$)</TableHead>
                          <TableHead className="text-right">PA</TableHead>
                          <TableHead className="text-right">Pontos (Auto)</TableHead>
                          <TableHead className="text-right">Pontos Extras</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {localSellers.map((seller) => (
                          <TableRow key={seller.id}>
                            <TableCell className="font-medium">{seller.name}</TableCell>
                            <TableCell>
                                <Input
                                  type="number"
                                  step="0.01"
                                  className="bg-input text-right min-w-[140px]"
                                  value={seller.salesValue}
                                  onChange={(e) => handleSellerPerfUpdate(seller.id, 'salesValue', e.target.value)}
                                />
                            </TableCell>
                            <TableCell>
                                <Input
                                  type="number"
                                  step="0.01"
                                  className="bg-input text-right min-w-[140px]"
                                  value={seller.ticketAverage}
                                  onChange={(e) => handleSellerPerfUpdate(seller.id, 'ticketAverage', e.target.value)}
                                 />
                            </TableCell>
                            <TableCell>
                                <Input
                                  type="number"
                                  step="0.1"
                                  className="bg-input text-right min-w-[100px]"
                                  value={seller.pa}
                                  onChange={(e) => handleSellerPerfUpdate(seller.id, 'pa', e.target.value)}
                                />
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center justify-end gap-2">
                                <Input
                                  type="number"
                                  className="bg-input text-right min-w-[100px]"
                                  value={seller.points}
                                  disabled
                                />
                                <TooltipProvider>
                                  <Tooltip>
                                    <TooltipTrigger>
                                      <Info className="size-4 text-muted-foreground" />
                                    </TooltipTrigger>
                                    <TooltipContent>
                                      <p>Pontos de missões, cursos e quizzes.</p>
                                    </TooltipContent>
                                  </Tooltip>
                                </TooltipProvider>
                              </div>
                            </TableCell>
                             <TableCell>
                                <Input
                                  type="number"
                                  className="bg-input text-right min-w-[100px]"
                                  value={seller.extraPoints}
                                  onChange={(e) => handleSellerPerfUpdate(seller.id, 'extraPoints', e.target.value)}
                                />
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                ) : (
                  <div className="text-center text-muted-foreground border-2 border-dashed border-border rounded-lg p-8">
                    <Users className="mx-auto h-12 w-12 text-muted-foreground" />
                    <p className="mt-4 font-semibold">Nenhum vendedor encontrado</p>
                    <p className="text-sm">Adicione um novo vendedor para começar a gerenciar.</p>
                  </div>
                )}
                 <div className="flex justify-end pt-6">
                    <Button onClick={handleSaveChanges} className="bg-gradient-to-r from-blue-500 to-purple-600 text-primary-foreground font-semibold">
                      Salvar Lançamentos
                    </Button>
                </div>
            </CardContent>
          </Card>
        </TabsContent>
         <TabsContent value="vendedores" className="space-y-6 mt-4">
            <Card className="bg-card border-border">
              <CardHeader>
                <CardTitle className="text-xl">Gerenciar Vendedores</CardTitle>
                <CardDescription>Adicione novos vendedores e gerencie suas credenciais de acesso.</CardDescription>
              </CardHeader>
              <CardContent>
                  {localSellers.length > 0 && (
                    <div className="rounded-md border border-border mb-6">
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>Nome</TableHead>
                            <TableHead>Login (Nickname)</TableHead>
                            <TableHead>Senha</TableHead>
                            <TableHead className="text-center">Ações</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {localSellers.map((seller) => (
                            <TableRow key={seller.id}>
                              <TableCell className="font-medium">{seller.name}</TableCell>
                              <TableCell>
                                <Input value={seller.nickname} onChange={(e) => handleSellerCredsUpdate(seller.id, 'nickname', e.target.value)} className="bg-input" />
                              </TableCell>
                              <TableCell>
                                <Input type="text" value={seller.password} onChange={(e) => handleSellerCredsUpdate(seller.id, 'password', e.target.value)} className="bg-input" />
                              </TableCell>
                              <TableCell className="text-center">
                                <Button variant="ghost" size="icon" onClick={() => handleDeleteSeller(seller.id)} aria-label="Remover vendedor">
                                  <Trash2 className="h-4 w-4 text-destructive" />
                                </Button>
                              </TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </div>
                  )}

                  <div className="pt-4 border-t">
                    <CardTitle className="text-lg">Adicionar Novo Vendedor</CardTitle>
                    <form onSubmit={handleAddSeller} className="flex items-end gap-4 pt-4">
                      <div className="space-y-2 flex-grow">
                        <Label htmlFor="sellerName">Nome</Label>
                        <Input id="sellerName" placeholder="Nome completo" value={newSeller.name} onChange={(e) => setNewSeller(s => ({...s, name: e.target.value}))} className="bg-input" required />
                      </div>
                      <div className="space-y-2 flex-grow">
                        <Label htmlFor="sellerNickname">Login (Nickname)</Label>
                        <Input id="sellerNickname" placeholder="login.do.vendedor" value={newSeller.nickname} onChange={(e) => setNewSeller(s => ({...s, nickname: e.target.value}))} className="bg-input" required />
                      </div>
                       <div className="space-y-2 flex-grow">
                        <Label htmlFor="sellerPassword">Senha</Label>
                        <Input id="sellerPassword" type="text" placeholder="Senha de acesso" value={newSeller.password} onChange={(e) => setNewSeller(s => ({...s, password: e.target.value}))} className="bg-input" required />
                      </div>
                      <Button type="submit">
                          Adicionar à Lista
                      </Button>
                    </form>
                  </div>
                   <div className="flex justify-end pt-6 mt-6 border-t">
                      <Button onClick={handleSaveChanges} className="bg-gradient-to-r from-blue-500 to-purple-600 text-primary-foreground font-semibold">
                          Salvar Alterações de Vendedores
                      </Button>
                  </div>
              </CardContent>
            </Card>
        </TabsContent>
        <TabsContent value="metas" className="space-y-6 mt-4">
          <Card className="bg-card border-border">
            <CardHeader>
              <CardTitle>Definir Metas de Performance</CardTitle>
              <CardDescription>
                Configure os valores para cada nível de meta e os prêmios associados.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-8">
              <div>
                <h3 className="text-lg font-medium mb-4">Valor de Venda (R$)</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    {goalLevels.map(level => (
                        <div key={level.key} className="space-y-2 rounded-lg border p-3">
                            <h4 className="font-semibold text-center">{level.label}</h4>
                            <div className="space-y-1.5">
                                <Label htmlFor={`sales-${level.key}-threshold`}>Meta</Label>
                                <Input id={`sales-${level.key}-threshold`} type="number" placeholder="Valor" value={localGoals.salesValue[level.key].threshold} onChange={(e) => handleGoalChange('salesValue', level.key, 'threshold', e.target.value)} className="bg-input" />
                            </div>
                            <div className="space-y-1.5">
                                <Label htmlFor={`sales-${level.key}-prize`}>Prêmio (R$)</Label>
                                <Input id={`sales-${level.key}-prize`} type="number" placeholder="Prêmio" value={localGoals.salesValue[level.key].prize} onChange={(e) => handleGoalChange('salesValue', level.key, 'prize', e.target.value)} className="bg-input" />
                            </div>
                        </div>
                    ))}
                </div>
                <div className="mt-6 border-t pt-6">
                    <h4 className="text-base font-medium mb-2 flex items-center gap-2">
                        <Trophy className="size-5 text-yellow-400" />
                        Bônus de Performance
                    </h4>
                    <p className="text-sm text-muted-foreground mb-4">
                        Prêmio adicional para vendas que excederem a meta Lendária.
                    </p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-md">
                        <div className="space-y-1.5">
                            <Label htmlFor="performance-bonus-prize">Bônus (R$)</Label>
                            <Input id="performance-bonus-prize" type="number" placeholder="Ex: 50" value={localGoals.salesValue.performanceBonus?.prize ?? ''} onChange={(e) => handlePerformanceBonusChange('prize', e.target.value)} className="bg-input" />
                        </div>
                        <div className="space-y-1.5">
                            <Label htmlFor="performance-bonus-per">A cada (R$)</Label>
                            <Input id="performance-bonus-per" type="number" placeholder="Ex: 1000" value={localGoals.salesValue.performanceBonus?.per ?? ''} onChange={(e) => handlePerformanceBonusChange('per', e.target.value)} className="bg-input" />
                        </div>
                    </div>
                </div>
              </div>
               <div className="border-t border-border pt-8">
                <h3 className="text-lg font-medium mb-4">Ticket Médio (R$)</h3>
                 <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    {goalLevels.map(level => (
                        <div key={level.key} className="space-y-2 rounded-lg border p-3">
                            <h4 className="font-semibold text-center">{level.label}</h4>
                            <div className="space-y-1.5">
                                <Label htmlFor={`ticket-${level.key}-threshold`}>Meta</Label>
                                <Input id={`ticket-${level.key}-threshold`} type="number" placeholder="Valor" value={localGoals.ticketAverage[level.key].threshold} onChange={(e) => handleGoalChange('ticketAverage', level.key, 'threshold', e.target.value)} className="bg-input" />
                            </div>
                            <div className="space-y-1.5">
                                <Label htmlFor={`ticket-${level.key}-prize`}>Prêmio (R$)</Label>
                                <Input id={`ticket-${level.key}-prize`} type="number" placeholder="Prêmio" value={localGoals.ticketAverage[level.key].prize} onChange={(e) => handleGoalChange('ticketAverage', level.key, 'prize', e.target.value)} className="bg-input" />
                            </div>
                        </div>
                    ))}
                </div>
              </div>
              <div className="border-t border-border pt-8">
                <h3 className="text-lg font-medium mb-4">PA (Produtos por Atendimento)</h3>
                 <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    {goalLevels.map(level => (
                        <div key={level.key} className="space-y-2 rounded-lg border p-3">
                            <h4 className="font-semibold text-center">{level.label}</h4>
                            <div className="space-y-1.5">
                                <Label htmlFor={`pa-${level.key}-threshold`}>Meta</Label>
                                <Input id={`pa-${level.key}-threshold`} type="number" step="0.1" placeholder="Valor" value={localGoals.pa[level.key].threshold} onChange={(e) => handleGoalChange('pa', level.key, 'threshold', e.target.value)} className="bg-input" />
                            </div>
                            <div className="space-y-1.5">
                                <Label htmlFor={`pa-${level.key}-prize`}>Prêmio (R$)</Label>
                                <Input id={`pa-${level.key}-prize`} type="number" placeholder="Prêmio" value={localGoals.pa[level.key].prize} onChange={(e) => handleGoalChange('pa', level.key, 'prize', e.target.value)} className="bg-input" />
                            </div>
                        </div>
                    ))}
                </div>
              </div>
              <div className="border-t border-border pt-8">
                <h3 className="text-lg font-medium mb-4">Pontos</h3>
                 <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    {goalLevels.map(level => (
                        <div key={level.key} className="space-y-2 rounded-lg border p-3">
                            <h4 className="font-semibold text-center">{level.label}</h4>
                            <div className="space-y-1.5">
                                <Label htmlFor={`points-${level.key}-threshold`}>Meta</Label>
                                <Input id={`points-${level.key}-threshold`} type="number" placeholder="Valor" value={localGoals.points[level.key].threshold} onChange={(e) => handleGoalChange('points', level.key, 'threshold', e.target.value)} className="bg-input" />
                            </div>
                            <div className="space-y-1.5">
                                <Label htmlFor={`points-${level.key}-prize`}>Prêmio (R$)</Label>
                                <Input id={`points-${level.key}-prize`} type="number" placeholder="Prêmio" value={localGoals.points[level.key].prize} onChange={(e) => handleGoalChange('points', level.key, 'prize', e.target.value)} className="bg-input" />
                            </div>
                        </div>
                    ))}
                </div>
              </div>
              <div className="flex justify-end pt-6 border-t border-border">
                 <Button onClick={handleSaveChanges} className="bg-gradient-to-r from-blue-500 to-purple-600 text-primary-foreground font-semibold">
                  Salvar Metas
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

========================================
File: src/app/globals.css
========================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 10%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 258 95% 68%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5% 26%;
    --input: 240 8% 17%;
    --ring: 258 95% 68%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 7%;
    --foreground: 0 0% 98%;
    --card: 240 10% 10%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 7%;
    --popover-foreground: 0 0% 98%;
    --primary: 258 95% 68%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5% 18%;
    --input: 240 8% 17%;
    --ring: 258 95% 68%;
    --chart-1: 258 95% 68%;
    --chart-2: 210 14% 70%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 13% 12%;
    --sidebar-foreground: 240 5% 64.9%;
    --sidebar-primary: 258 95% 68%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 10% 18%;
    --sidebar-accent-foreground: 0 0% 98%;
    --sidebar-border: 240 5% 18%;
    --sidebar-ring: 258 95% 68%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

========================================
File: src/app/layout.tsx
========================================
import type {Metadata} from 'next';
import './globals.css';
import { Toaster } from "@/components/ui/toaster"

export const metadata: Metadata = {
  title: 'Acelera GT Supermoda',
  description: 'Plataforma de gamificação para aceleração de conhecimento.',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="pt-BR" className="dark">
      <head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
      </head>
      <body className="font-body antialiased">
        {children}
        <Toaster />
      </body>
    </html>
  );
}

========================================
File: src/app/login/page.tsx
========================================
'use client';

import {useState} from 'react';
import {Button} from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {Input} from '@/components/ui/input';
import {Label} from '@/components/ui/label';
import {Logo} from '@/components/icons/logo';
import {useRouter} from 'next/navigation';
import {useToast} from '@/hooks/use-toast';
import {dataStore} from '@/lib/store';
import {Loader2} from 'lucide-react';
import {
  AlertDialog,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { sendPasswordReset } from '@/ai/flows/send-password-reset-flow';

export default function LoginPage() {
  const router = useRouter();
  const {toast} = useToast();
  const [login, setLogin] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showForgotDialog, setShowForgotDialog] = useState(false);
  const [resetIdentifier, setResetIdentifier] = useState('');
  const [isSendingReset, setIsSendingReset] = useState(false);

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    const {adminUser, sellers} = dataStore.getState();

    // Check admin credentials
    if (
      login.toLowerCase() === adminUser.nickname &&
      password === adminUser.password
    ) {
      router.push('/admin');
      return;
    }

    // Check seller credentials
    const seller = sellers.find(
      s =>
        s.nickname?.toLowerCase() === login.toLowerCase() ||
        s.email?.toLowerCase() === login.toLowerCase()
    );

    if (seller && seller.password === password) {
      // Store the logged-in seller's ID to manage their session
      if (typeof window !== 'undefined') {
        localStorage.setItem('loggedInSellerId', seller.id);
      }
      router.push('/seller');
    } else {
      toast({
        variant: 'destructive',
        title: 'Falha no Login',
        description: 'Login ou senha inválidos. Por favor, tente novamente.',
      });
      setIsLoading(false);
    }
  };
  
  const handlePasswordReset = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!resetIdentifier.trim()) {
        toast({
            variant: 'destructive',
            title: 'Campo Obrigatório',
            description: 'Por favor, insira seu login ou email.',
        });
        return;
    }

    setIsSendingReset(true);

    try {
        const result = await sendPasswordReset({ identifier: resetIdentifier });
        if (result.success) {
            toast({
                title: 'Verifique seu Email',
                description: 'Se o usuário for um administrador, um email de recuperação foi enviado.',
            });
            setShowForgotDialog(false);
        } else {
            toast({
                variant: 'destructive',
                title: 'Falha na Recuperação',
                description: result.message,
            });
        }
    } catch (error) {
        console.error('Password reset error:', error);
        toast({
            variant: 'destructive',
            title: 'Erro no Sistema',
            description: 'Não foi possível processar sua solicitação. Tente novamente mais tarde.',
        });
    } finally {
        setIsSendingReset(false);
        setResetIdentifier('');
    }
  };

  return (
    <>
      <div className="flex items-center justify-center min-h-screen bg-background">
        <Card className="mx-auto max-w-sm bg-card border-border">
          <CardHeader>
            <div className="flex justify-center mb-4">
              <Logo />
            </div>
            <CardTitle className="text-2xl text-center">Acessar Painel</CardTitle>
            <CardDescription className="text-center">
              Entre com seu e-mail ou nickname para acessar.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleLogin}>
              <div className="grid gap-4">
                <div className="grid gap-2">
                  <Label htmlFor="login">Email ou Nickname</Label>
                  <Input
                    id="login"
                    type="text"
                    placeholder="seu@email.com ou nickname"
                    required
                    className="bg-input"
                    value={login}
                    onChange={e => setLogin(e.target.value)}
                    disabled={isLoading}
                  />
                </div>
                <div className="grid gap-2">
                  <div className="flex items-center">
                    <Label htmlFor="password">Senha</Label>
                    <button
                      type="button"
                      onClick={() => setShowForgotDialog(true)}
                      className="ml-auto inline-block text-sm underline text-muted-foreground hover:text-primary"
                    >
                      Esqueci minha senha
                    </button>
                  </div>
                  <Input
                    id="password"
                    type="password"
                    required
                    className="bg-input"
                    value={password}
                    onChange={e => setPassword(e.target.value)}
                    disabled={isLoading}
                  />
                </div>
                <Button
                  type="submit"
                  className="w-full bg-primary hover:bg-primary/90"
                  disabled={isLoading}
                >
                  {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                  Entrar
                </Button>
              </div>
            </form>
            <div className="mt-4 text-center text-sm text-muted-foreground">
              É um administrador? Use suas credenciais de acesso.
            </div>
          </CardContent>
        </Card>
      </div>
      <AlertDialog open={showForgotDialog} onOpenChange={setShowForgotDialog}>
        <AlertDialogContent>
          <form onSubmit={handlePasswordReset}>
              <AlertDialogHeader>
                  <AlertDialogTitle>Redefinir Senha</AlertDialogTitle>
                  <AlertDialogDescription>
                      Para redefinir a senha de administrador, insira o login ou e-mail associado. As instruções serão enviadas de <span className="font-medium">super.moda@yahoo.com.br</span>.
                      <br/>
                      <span className='italic'>Vendedores devem contatar o administrador diretamente.</span>
                  </AlertDialogDescription>
              </AlertDialogHeader>
              <div className="py-4">
                  <Label htmlFor="reset-identifier">Login ou Email do Administrador</Label>
                  <Input
                      id="reset-identifier"
                      placeholder="admin ou admin@email.com"
                      value={resetIdentifier}
                      onChange={(e) => setResetIdentifier(e.target.value)}
                      disabled={isSendingReset}
                      className="mt-2"
                  />
              </div>
              <AlertDialogFooter>
                  <AlertDialogCancel disabled={isSendingReset}>Cancelar</AlertDialogCancel>
                  <Button type="submit" disabled={isSendingReset}>
                      {isSendingReset && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                      Enviar
                  </Button>
              </AlertDialogFooter>
          </form>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

========================================
File: src/app/page.tsx
========================================
import { redirect } from 'next/navigation';

export default function RootPage() {
  redirect('/admin');
  return null;
}

========================================
File: src/app/seller/academia/page.tsx
========================================
'use client';

import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, Sparkles, BookCopy, Trash2, GraduationCap, Star, CheckCircle, XCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import ReactMarkdown from 'react-markdown';
import { generateCourse } from "@/ai/flows/generate-course-flow";
import type { Course } from '@/lib/types';
import { cn } from '@/lib/utils';
import { useSellerContext } from '@/app/seller/layout';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';

const COURSE_POINTS_CONFIG = {
  'Fácil': 100,
  'Médio': 150,
  'Difícil': 200,
} as const;

type Dificuldade = keyof typeof COURSE_POINTS_CONFIG;

// Component for a single course quiz
const CourseQuiz = ({ course, onComplete }: { course: Course; onComplete: () => void }) => {
    const [answers, setAnswers] = useState<(number | null)[]>(new Array(course.quiz.length).fill(null));
    const [submitted, setSubmitted] = useState(false);

    const handleAnswerChange = (questionIndex: number, answerIndex: number) => {
        const newAnswers = [...answers];
        newAnswers[questionIndex] = answerIndex;
        setAnswers(newAnswers);
    };

    const handleSubmit = () => {
        setSubmitted(true);
        onComplete();
    };
    
    const allQuestionsAnswered = answers.every(a => a !== null);

    return (
        <div className="space-y-6">
            <h4 className="font-semibold text-lg">Teste seus conhecimentos</h4>
            {course.quiz.map((q, qIndex) => (
                <div key={qIndex} className={cn(
                    "p-4 rounded-lg bg-input transition-all",
                    submitted && (answers[qIndex] === q.correctAnswerIndex ? 'border-2 border-green-500' : 'border-2 border-destructive')
                )}>
                    <p><strong>{qIndex + 1}. {q.question}</strong></p>
                    <RadioGroup
                        value={answers[qIndex]?.toString()}
                        onValueChange={(value) => handleAnswerChange(qIndex, parseInt(value))}
                        disabled={submitted}
                        className="mt-2 space-y-2"
                    >
                        {q.options.map((opt, oIndex) => (
                            <Label key={oIndex} htmlFor={`q${qIndex}-o${oIndex}`} className="flex items-center gap-3 p-2 rounded-md hover:bg-background/50 cursor-pointer">
                                <RadioGroupItem value={oIndex.toString()} id={`q${qIndex}-o${oIndex}`} />
                                <span>{opt}</span>
                            </Label>
                        ))}
                    </RadioGroup>
                    {submitted && (
                        <div className="mt-3 text-sm flex items-center gap-2">
                             {answers[qIndex] === q.correctAnswerIndex 
                                ? <CheckCircle className="size-4 text-green-500" />
                                : <XCircle className="size-4 text-destructive" />}
                            <p><span className="font-bold">Explicação:</span> {q.explanation}</p>
                        </div>
                    )}
                </div>
            ))}
            <Button onClick={handleSubmit} disabled={!allQuestionsAnswered || submitted}>
                {submitted ? 'Quiz Finalizado' : 'Finalizar Quiz e Concluir Curso'}
            </Button>
        </div>
    );
};


export default function AcademiaPage() {
  const { currentSeller, setSellers } = useSellerContext();
  const [course, setCourse] = useState<Course | null>(null);
  const [isGeneratingCourse, setIsGeneratingCourse] = useState(false);
  const [selectedTopic, setSelectedTopic] = useState<string>('');
  const [dificuldade, setDificuldade] = useState<Dificuldade>('Médio');
  const { toast } = useToast();

  const courseTopics = [
    'Técnicas de Atendimento ao Cliente para Lojas de Calçados',
    'Conhecimento de Materiais: Couro, Sintéticos e Tecidos',
    'Como Lidar com Objeções de Clientes e Fechar Vendas',
    'Organização de Estoque e Vitrinismo para Calçados',
    'Vendas Adicionais: Como Oferecer Meias e Produtos de Limpeza'
  ];

  const handleGenerateCourse = async () => {
     if (!selectedTopic) {
        toast({
            variant: 'destructive',
            title: 'Selecione um tópico',
            description: 'Você precisa escolher um tópico para gerar o curso.',
        });
        return;
    }

    const today = new Date().toISOString().split('T')[0];
    if (currentSeller?.lastCourseCompletionDate === today) {
        toast({
            variant: 'destructive',
            title: 'Limite Diário Atingido',
            description: `${currentSeller.name} já concluiu um curso hoje. Volte amanhã!`,
        });
        return;
    }

    setIsGeneratingCourse(true);
    setCourse(null);
    try {
      const seed = `${new Date().toISOString().split('T')[0]}-${currentSeller.id}-${selectedTopic}-${dificuldade}`;
      const result = await generateCourse({ topic: selectedTopic, seed, dificuldade });
      const points = COURSE_POINTS_CONFIG[dificuldade];
      const newCourse: Course = {
        id: new Date().getTime().toString(),
        ...result,
        points,
        dificuldade,
      };
      setCourse(newCourse);
      toast({
        title: "Curso Gerado com Sucesso!",
        description: `O curso "${result.title}" foi criado.`,
      });
    } catch (error) {
      console.error("Failed to generate course:", error);
      toast({
        variant: 'destructive',
        title: 'Falha ao Gerar Curso',
        description: 'A IA não conseguiu gerar o conteúdo. Um curso padrão foi carregado.',
      });
    } finally {
      setIsGeneratingCourse(false);
    }
  };

  const handleCompleteCourse = () => {
    if (!course) return;
    const today = new Date().toISOString().split('T')[0];

    setSellers(prevSellers =>
        prevSellers.map(seller =>
            seller.id === currentSeller.id
            ? { ...seller, points: seller.points + course.points, lastCourseCompletionDate: today }
            : seller
        )
    );

    toast({
        title: 'Curso Concluído!',
        description: `${currentSeller?.name} ganhou ${course.points} pontos pelo curso "${course?.title}".`,
    });
  };
  
  return (
    <div className="space-y-8">
      <div className="flex items-center gap-4">
        <GraduationCap className="size-8 text-primary" />
        <h1 className="text-3xl font-bold">Academia de Vendas</h1>
      </div>

      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="text-xl">Gerador de Cursos</CardTitle>
          <CardDescription>
            Selecione um tópico e um grau de dificuldade. A pontuação varia conforme o nível:
            <span className="ml-2 font-bold text-green-400">Fácil: 100pts | Médio: 150pts | Difícil: 200pts</span>
          </CardDescription>
        </CardHeader>
        <CardContent>
            <div className="flex items-end gap-4">
                <div className="space-y-2 flex-grow">
                    <Label htmlFor="course-topic-select">Tópico do Curso</Label>
                    <Select onValueChange={setSelectedTopic} value={selectedTopic}>
                        <SelectTrigger id="course-topic-select">
                            <SelectValue placeholder="Escolha um tópico..." />
                        </SelectTrigger>
                        <SelectContent>
                            {courseTopics.map((topic, index) => (
                                <SelectItem key={index} value={topic}>{topic}</SelectItem>
                            ))}
                        </SelectContent>
                    </Select>
                </div>
                <div className="space-y-2 min-w-[180px]">
                  <Label htmlFor="dificuldade-select">Dificuldade</Label>
                  <Select value={dificuldade} onValueChange={v => setDificuldade(v as Dificuldade)}>
                    <SelectTrigger id="dificuldade-select">
                      <SelectValue placeholder="Dificuldade" />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.keys(COURSE_POINTS_CONFIG).map(level => (
                        <SelectItem key={level} value={level}>{level}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <Button onClick={handleGenerateCourse} disabled={isGeneratingCourse || !selectedTopic} className="bg-gradient-to-r from-blue-500 to-purple-600 text-primary-foreground font-semibold">
                  {isGeneratingCourse ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Sparkles className="mr-2 h-4 w-4" />
                  )}
                  Gerar Curso com IA
                </Button>
            </div>
        </CardContent>
      </Card>

      <div className="space-y-4 pt-6">
        {course ? (
          <Card key={course.id} className="bg-background/50">
            <CardHeader className="flex flex-row items-start justify-between">
                <div>
                    <CardTitle>{course.title}</CardTitle>
                    <CardDescription className="flex items-center mt-2">
                       <Star className="mr-2 size-4 text-yellow-400" />
                       <span>{course.points} Pontos de Recompensa</span>
                       {course.dificuldade && <span className="ml-2 text-xs font-medium bg-secondary text-secondary-foreground px-2 py-0.5 rounded-full">{course.dificuldade}</span>}
                    </CardDescription>
                </div>
                <Button variant="ghost" size="icon" onClick={() => setCourse(null)} aria-label="Remover curso">
                    <Trash2 className="h-4 w-4 text-destructive" />
                </Button>
            </CardHeader>
            <CardContent className="space-y-4">
                <div className="prose prose-sm prose-invert max-w-none text-muted-foreground">
                    <ReactMarkdown>{course.content}</ReactMarkdown>
                </div>

                {course.quiz && course.quiz.length > 0 && (
                    <div className="pt-6 border-t">
                        <CourseQuiz course={course} onComplete={handleCompleteCourse} />
                    </div>
                )}
            </CardContent>
          </Card>
        ) : (
          !isGeneratingCourse && (
            <div className="text-center text-muted-foreground border-2 border-dashed border-border rounded-lg p-8">
              <BookCopy className="mx-auto h-12 w-12 text-muted-foreground" />
              <p className="mt-4 font-semibold">Nenhum curso gerado</p>
              <p className="text-sm">Gere um novo curso com IA para começar seu aprendizado.</p>
            </div>
          )
        )}
      </div>
    </div>
  );
}

========================================
File: src/app/seller/dashboard/page.tsx
========================================
'use client';

import {useSellerContext} from '@/app/seller/layout';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@/components/ui/card';
import {Progress} from '@/components/ui/progress';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {format} from 'date-fns';
import {Star, Ticket, Box} from 'lucide-react';
import type {Mission} from '@/lib/types';

export default function SellerDashboardPage() {
  const {currentSeller, missions, goals} = useSellerContext();
  const totalPoints = currentSeller.points + currentSeller.extraPoints;

  const getGoalProgress = (
    value: number,
    criterion: 'salesValue' | 'ticketAverage' | 'pa' | 'points'
  ) => {
    const goalLevels = goals[criterion];
    if (value >= goalLevels.lendaria.threshold) return 100;
    if (value >= goalLevels.metona.threshold)
      return (
        75 +
        ((value - goalLevels.metona.threshold) /
          (goalLevels.lendaria.threshold - goalLevels.metona.threshold)) *
          25
      );
    if (value >= goalLevels.meta.threshold)
      return (
        50 +
        ((value - goalLevels.meta.threshold) /
          (goalLevels.metona.threshold - goalLevels.meta.threshold)) *
          25
      );
    if (value >= goalLevels.metinha.threshold)
      return (
        25 +
        ((value - goalLevels.metinha.threshold) /
          (goalLevels.meta.threshold - goalLevels.metinha.threshold)) *
          25
      );
    return (value / goalLevels.metinha.threshold) * 25;
  };

  const formatReward = (mission: Mission) => {
    if (mission.rewardType === 'cash') {
      return mission.rewardValue.toLocaleString('pt-BR', {
        style: 'currency',
        currency: 'BRL',
      });
    }
    return `${mission.rewardValue} pts`;
  };

  return (
    <div className="space-y-8">
      <div className="space-y-2">
        <h1 className="text-3xl font-bold">Olá, {currentSeller.name}!</h1>
        <p className="text-muted-foreground">
          Bem-vindo(a) de volta ao seu painel. Aqui está o seu desempenho.
        </p>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total de Pontos</CardTitle>
            <Star className="h-4 w-4 text-yellow-400" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {totalPoints.toLocaleString('pt-BR')}
            </div>
            <p className="text-xs text-muted-foreground">
              Progresso para a próxima meta
            </p>
            <Progress
              value={getGoalProgress(totalPoints, 'points')}
              className="mt-2 h-2"
            />
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Ticket Médio</CardTitle>
            <Ticket className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {currentSeller.ticketAverage.toLocaleString('pt-BR', {
                style: 'currency',
                currency: 'BRL',
              })}
            </div>
            <p className="text-xs text-muted-foreground">
              Progresso para a próxima meta
            </p>
            <Progress
              value={getGoalProgress(
                currentSeller.ticketAverage,
                'ticketAverage'
              )}
              className="mt-2 h-2"
            />
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Produtos por Atendimento (PA)
            </CardTitle>
            <Box className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {currentSeller.pa.toFixed(1)}
            </div>
            <p className="text-xs text-muted-foreground">
              Progresso para a próxima meta
            </p>
            <Progress
              value={getGoalProgress(currentSeller.pa, 'pa')}
              className="mt-2 h-2"
            />
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Missões Ativas</CardTitle>
          <CardDescription>
            Participe desses desafios para ganhar pontos extras!
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Missão</TableHead>
                  <TableHead>Descrição</TableHead>
                  <TableHead>Período</TableHead>
                  <TableHead className="text-right">Recompensa</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {missions.map(mission => (
                  <TableRow key={mission.id}>
                    <TableCell className="font-medium">{mission.name}</TableCell>
                    <TableCell className="text-muted-foreground">
                      {mission.description}
                    </TableCell>
                    <TableCell>
                      {format(mission.startDate, 'dd/MM/yy')} -{' '}
                      {format(mission.endDate, 'dd/MM/yy')}
                    </TableCell>
                    <TableCell className="text-right font-semibold text-primary">
                      {formatReward(mission)}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

========================================
File: src/app/seller/layout.tsx
========================================
'use client';

import * as React from 'react';
import Link from 'next/link';
import {usePathname, useRouter} from 'next/navigation';
import {
  GraduationCap,
  LayoutGrid,
  LogOut,
  Puzzle,
  Target,
  Trophy,
  User,
  ShoppingBag,
} from 'lucide-react';

import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuItem,
  SidebarMenuButton,
  SidebarProvider,
  SidebarTrigger,
} from '@/components/ui/sidebar';
import {Button} from '@/components/ui/button';
import {Logo} from '@/components/icons/logo';
import {cn} from '@/lib/utils';
import type {Seller, Goals, Mission} from '@/lib/types';
import {dataStore, useStore} from '@/lib/store';
import {Loader2} from 'lucide-react';

interface SellerContextType {
  sellers: Seller[];
  setSellers: (updater: (prev: Seller[]) => Seller[]) => void;
  goals: Goals;
  missions: Mission[];
  currentSeller: Seller;
}

export const SellerContext = React.createContext<SellerContextType | null>(
  null
);

export const useSellerContext = () => {
  const context = React.useContext(SellerContext);
  if (!context) {
    throw new Error('useSellerContext must be used within a SellerLayout');
  }
  return context;
};

const menuItems = [
  {href: '/seller/dashboard', label: 'Dashboard', icon: LayoutGrid},
  {href: '/seller/ranking', label: 'Meu Desempenho', icon: Trophy},
  {href: '/seller/missions', label: 'Missões', icon: Target},
  {href: '/seller/academia', label: 'Academia', icon: GraduationCap},
  {href: '/seller/quiz', label: 'Quiz', icon: Puzzle},
  {href: '/seller/loja', label: 'Loja', icon: ShoppingBag},
  {href: '/seller/perfil', label: 'Meu Perfil', icon: User},
];

export default function SellerLayout({children}: {children: React.ReactNode}) {
  const pathname = usePathname();
  const router = useRouter();
  const state = useStore(s => s);

  const [currentSeller, setCurrentSeller] = React.useState<Seller | null>(null);
  const [isClient, setIsClient] = React.useState(false);

  React.useEffect(() => {
    setIsClient(true);
    const sellerId = localStorage.getItem('loggedInSellerId');
    if (sellerId) {
      const foundSeller = state.sellers.find(s => s.id === sellerId);
      if (foundSeller) {
        setCurrentSeller(foundSeller);
      } else {
        localStorage.removeItem('loggedInSellerId');
        router.push('/login');
      }
    } else {
      router.push('/login');
    }
  }, [state.sellers, router]);

  const handleLogout = () => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem('loggedInSellerId');
    }
    router.push('/login');
  };

  const contextValue = React.useMemo(() => ({
    sellers: state.sellers,
    setSellers: dataStore.setSellers,
    goals: state.goals,
    missions: state.missions,
    currentSeller: currentSeller!,
  }), [state.sellers, state.goals, state.missions, currentSeller]);

  if (!currentSeller) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-background text-foreground">
        <Loader2 className="mr-2 h-6 w-6 animate-spin" />
        Carregando dados do vendedor...
      </div>
    );
  }

  return (
    <SellerContext.Provider value={contextValue}>
      <SidebarProvider>
        <div className="flex min-h-screen">
          <Sidebar
            collapsible="icon"
            className="border-r border-sidebar-border bg-sidebar"
          >
            <SidebarHeader className="p-4">
              <div className="flex items-center gap-3">
                <Logo />
                <h1 className="text-xl font-semibold text-white group-data-[collapsible=icon]:hidden">
                  Acelera GT Supermoda
                </h1>
              </div>
            </SidebarHeader>
            <SidebarContent>
              <SidebarMenu>
                {menuItems.map(item => (
                  <SidebarMenuItem key={item.label}>
                    <SidebarMenuButton
                      asChild
                      isActive={pathname === item.href}
                      className={cn(
                        'data-[active=true]:bg-primary data-[active=true]:text-primary-foreground data-[active=true]:font-semibold',
                        'text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground'
                      )}
                    >
                      <Link href={item.href}>
                        <item.icon className="size-5" />
                        <span className="group-data-[collapsible=icon]:hidden">
                          {item.label}
                        </span>
                      </Link>
                    </SidebarMenuButton>
                  </SidebarMenuItem>
                ))}
              </SidebarMenu>
            </SidebarContent>
            <SidebarFooter className="p-4 space-y-4">
              <div className="flex items-center justify-end group-data-[collapsible=icon]:justify-center">
                {isClient && (
                  <Button
                    onClick={handleLogout}
                    variant="secondary"
                    className="group-data-[collapsible=icon]:hidden bg-sidebar-accent hover:bg-sidebar-accent/80 text-sidebar-accent-foreground"
                  >
                    <LogOut />
                    Sair
                  </Button>
                )}
              </div>
            </SidebarFooter>
          </Sidebar>
          <div className="flex flex-col flex-1">
            <header className="md:hidden flex items-center justify-between p-4 border-b">
              <div className="flex items-center gap-2">
                <Logo />
                <h1 className="text-lg font-semibold text-white">Acelera GT Supermoda</h1>
              </div>
              <SidebarTrigger />
            </header>
            <main className="flex-1 p-4 sm:p-6 md:p-8 bg-background">
              {children}
            </main>
          </div>
        </div>
      </SidebarProvider>
    </SellerContext.Provider>
  );
}

========================================
File: src/app/seller/loja/page.tsx
========================================
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { ShoppingBag } from "lucide-react";

export default function LojaPage() {
  return (
    <div className="space-y-8">
      <div className="flex items-center gap-4">
        <ShoppingBag className="size-8 text-primary" />
        <h1 className="text-3xl font-bold">Loja de Prêmios</h1>
      </div>
      <Card className="bg-card border-border">
        <CardHeader>
            <CardTitle>Em Breve</CardTitle>
            <CardDescription>A loja de prêmios está sendo preparada!</CardDescription>
        </CardHeader>
        <CardContent>
            <div className="text-center text-muted-foreground border-2 border-dashed border-border rounded-lg p-12">
              <ShoppingBag className="mx-auto h-12 w-12 text-muted-foreground" />
              <p className="mt-4 font-semibold">Funcionalidade em desenvolvimento.</p>
              <p className="text-sm">
                Em breve você poderá trocar seus pontos por prêmios incríveis.
              </p>
            </div>
        </CardContent>
      </Card>
    </div>
  );
}

========================================
File: src/app/seller/missions/page.tsx
========================================
'use client';

import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Target, Star, CheckCircle } from 'lucide-react';
import { useSellerContext } from '@/app/seller/layout';
import { format } from 'date-fns';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import type { Mission } from '@/lib/types';

export default function MissionsPage() {
  const { missions } = useSellerContext();

  // In a real app, you would have logic to determine if a mission is completed by the user
  const getMissionStatus = (missionId: string) => {
    // Dummy logic for prototype
    if (missionId === '3') return { label: 'Concluída', icon: <CheckCircle className="size-4 text-green-500" />, completed: true };
    return { label: 'Ativa', icon: null, completed: false };
  };

  const formatReward = (mission: Mission) => {
    if (mission.rewardType === 'cash') {
      return mission.rewardValue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
    }
    return `${mission.rewardValue} pts`;
  }

  return (
    <div className="space-y-8">
      <div className="flex items-center gap-4">
        <Target className="size-8 text-primary" />
        <h1 className="text-3xl font-bold">Minhas Missões</h1>
      </div>
      
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle>Missões Disponíveis</CardTitle>
          <CardDescription>
            Complete os desafios abaixo para ganhar pontos extras e subir no ranking!
          </CardDescription>
        </CardHeader>
        <CardContent>
          {missions.length > 0 ? (
             <div className="rounded-md border border-border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Missão</TableHead>
                    <TableHead>Período</TableHead>
                    <TableHead className="text-center">Recompensa</TableHead>
                    <TableHead className="text-center">Status</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {missions.map((mission) => {
                    const status = getMissionStatus(mission.id);
                    return (
                        <TableRow key={mission.id} className={status.completed ? 'text-muted-foreground' : ''}>
                        <TableCell className="font-medium">{mission.name}</TableCell>
                        <TableCell>{format(mission.startDate, 'dd/MM/yy')} - {format(mission.endDate, 'dd/MM/yy')}</TableCell>
                        <TableCell className="text-center font-semibold text-primary">{formatReward(mission)}</TableCell>
                        <TableCell className="text-center">
                            <Badge variant={status.completed ? 'secondary' : 'default'} className="flex items-center justify-center gap-2">
                                {status.icon}
                                <span>{status.label}</span>
                            </Badge>
                        </TableCell>
                        </TableRow>
                    )
                  })}
                </TableBody>
              </Table>
            </div>
          ) : (
            <div className="text-center text-muted-foreground border-2 border-dashed border-border rounded-lg p-12">
              <Target className="mx-auto h-12 w-12 text-muted-foreground" />
              <p className="mt-4 font-semibold">Nenhuma missão disponível</p>
              <p className="text-sm">
                Volte em breve para novos desafios.
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

========================================
File: src/app/seller/page.tsx
========================================
import { redirect } from 'next/navigation';

export default function SellerRootPage() {
  redirect('/seller/dashboard');
  return null;
}

========================================
File: src/app/seller/perfil/page.tsx
========================================
'use client'

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { User } from "lucide-react";
import { useSellerContext } from "../layout";
import { useToast } from "@/hooks/use-toast";

export default function PerfilPage() {
    const { currentSeller } = useSellerContext();
    const { toast } = useToast();
    const [nickname, setNickname] = useState(currentSeller.nickname || '');
    const [email, setEmail] = useState(currentSeller.email || '');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if (password !== confirmPassword) {
            toast({
                variant: 'destructive',
                title: 'Erro de Validação',
                description: 'As senhas não coincidem. Por favor, tente novamente.',
            });
            return;
        }

        // In a real app, you would handle the update logic here.
        // For this prototype, we'll just show a success message.
        console.log({
            userId: currentSeller.id,
            newNickname: nickname,
            newEmail: email,
            newPassword: password,
        });

        toast({
            title: 'Perfil Atualizado!',
            description: 'Suas informações foram salvas com sucesso.',
        });

        setPassword('');
        setConfirmPassword('');
    }

  return (
    <div className="space-y-8">
      <div className="flex items-center gap-4">
        <User className="size-8 text-primary" />
        <h1 className="text-3xl font-bold">Meu Perfil</h1>
      </div>
      <Card className="bg-card border-border max-w-2xl">
        <CardHeader>
            <CardTitle>Configurações da Conta</CardTitle>
            <CardDescription>Atualize suas informações de login.</CardDescription>
        </CardHeader>
        <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
                <div className="space-y-2">
                    <Label htmlFor="name">Nome</Label>
                    <Input id="name" value={currentSeller.name} disabled className="bg-input" />
                </div>
                <div className="space-y-2">
                    <Label htmlFor="nickname">Login (Nickname)</Label>
                    <Input id="nickname" type="text" placeholder="Seu nickname de login" value={nickname} onChange={(e) => setNickname(e.target.value)} className="bg-input" />
                </div>
                 <div className="space-y-2">
                    <Label htmlFor="email">Email (Opcional)</Label>
                    <Input id="email" type="email" placeholder="seu@email.com" value={email} onChange={(e) => setEmail(e.target.value)} className="bg-input" />
                </div>
                 <div className="grid md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                        <Label htmlFor="password">Nova Senha</Label>
                        <Input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} className="bg-input" placeholder="Deixe em branco para não alterar" />
                    </div>
                    <div className="space-y-2">
                        <Label htmlFor="confirmPassword">Confirmar Nova Senha</Label>
                        <Input id="confirmPassword" type="password" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} className="bg-input" />
                    </div>
                 </div>
                 <div className="flex justify-end">
                    <Button type="submit">Salvar Alterações</Button>
                 </div>
            </form>
        </CardContent>
      </Card>
    </div>
  );
}

========================================
File: src/app/seller/quiz/page.tsx
========================================
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import Quiz from "@/components/quiz";
import { Puzzle } from "lucide-react";

export default function QuizPage() {
  return (
    <div className="space-y-8">
       <div className="flex items-center gap-4">
        <Puzzle className="size-8 text-primary" />
        <h1 className="text-3xl font-bold">Quizzes</h1>
      </div>
      <Card className="bg-card border-border">
         <CardHeader>
          <CardTitle className="text-xl">Teste seus Conhecimentos</CardTitle>
          <CardDescription>
            Gere quizzes aleatórios sobre técnicas de venda e conhecimento de produtos em lojas de calçados.
          </CardDescription>
        </CardHeader>
        <CardContent>
            <Quiz />
        </CardContent>
      </Card>
    </div>
  );
}

========================================
File: src/app/seller/ranking/page.tsx
========================================
'use client';

import React, {useState, useMemo} from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {Tabs, TabsList, TabsTrigger} from '@/components/ui/tabs';
import {
  Trophy,
  Award,
  DollarSign,
  Ticket,
  Box,
  Star,
} from 'lucide-react';
import {Label} from '@/components/ui/label';
import {Badge} from '@/components/ui/badge';
import {useSellerContext} from '@/app/seller/layout';
import type {Goals, SalesValueGoals} from '@/lib/types';
import {Progress} from '@/components/ui/progress';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import {cn} from '@/lib/utils';

type RankingCriterion =
  | 'salesValue'
  | 'ticketAverage'
  | 'pa'
  | 'points'
  | 'totalPrize';
type GoalLevelName = 'Nenhuma' | 'Metinha' | 'Meta' | 'Metona' | 'Lendária';

const goalLevelConfig: Record<GoalLevelName, {label: string; className: string}> =
  {
    Nenhuma: {
      label: 'Nenhuma',
      className:
        'bg-muted border-transparent text-muted-foreground hover:bg-muted',
    },
    Metinha: {
      label: 'Metinha',
      className: 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20',
    },
    Meta: {
      label: 'Meta',
      className: 'bg-green-500/10 text-green-500 border-green-500/20',
    },
    Metona: {
      label: 'Metona',
      className: 'bg-blue-500/10 text-blue-400 border-blue-500/20',
    },
    Lendária: {
      label: 'Lendária',
      className: 'bg-purple-500/10 text-purple-400 border-purple-500/20',
    },
  };

export default function RankingPage() {
  const [criterion, setCriterion] = useState<RankingCriterion>('salesValue');
  const {
    sellers: sellersData,
    goals: goalsData,
    currentSeller,
  } = useSellerContext();

  const sortedSellers = useMemo(() => {
    const sellersWithPrizes = sellersData.map(seller => {
      const prizes: Record<
        keyof Omit<Goals, 'salesValue'> | 'salesValue',
        number
      > = {
        salesValue: 0,
        ticketAverage: 0,
        pa: 0,
        points: 0,
      };

      const allCriteria: Array<keyof Goals> = [
        'salesValue',
        'ticketAverage',
        'pa',
        'points',
      ];

      allCriteria.forEach(crit => {
        const goals = goalsData[crit];
        const sellerValue =
          crit === 'points' ? seller.points + seller.extraPoints : seller[crit];

        let currentPrize = 0;
        if (sellerValue >= goals.metinha.threshold)
          currentPrize += goals.metinha.prize;
        if (sellerValue >= goals.meta.threshold)
          currentPrize += goals.meta.prize;
        if (sellerValue >= goals.metona.threshold)
          currentPrize += goals.metona.prize;
        if (sellerValue >= goals.lendaria.threshold)
          currentPrize += goals.lendaria.prize;

        // Add performance bonus only if criterion is salesValue
        if (crit === 'salesValue') {
          const salesGoals = goals as SalesValueGoals;
          if (
            seller.salesValue > salesGoals.lendaria.threshold &&
            salesGoals.performanceBonus &&
            salesGoals.performanceBonus.per > 0
          ) {
            const excessSales =
              seller.salesValue - salesGoals.lendaria.threshold;
            const bonusUnits = Math.floor(
              excessSales / salesGoals.performanceBonus.per
            );
            currentPrize += bonusUnits * salesGoals.performanceBonus.prize;
          }
        }
        prizes[crit] = currentPrize;
      });

      const totalPrize = Object.values(prizes).reduce((sum, p) => sum + p, 0);

      return {...seller, prizes, totalPrize};
    });

    return sellersWithPrizes.sort((a, b) => {
      if (criterion === 'totalPrize') {
        return b.totalPrize - a.totalPrize;
      }
      if (criterion === 'points') {
        return b.points + b.extraPoints - (a.points + a.extraPoints);
      }
      return b[criterion] - a[criterion];
    });
  }, [sellersData, goalsData, criterion]);

  const currentUserRank = useMemo(() => {
    if (!currentSeller) return 0;
    const rank = sortedSellers.findIndex(s => s.id === currentSeller.id);
    return rank + 1;
  }, [sortedSellers, currentSeller]);

  const getCriterionLabel = (currentCriterion: RankingCriterion) => {
    switch (currentCriterion) {
      case 'salesValue':
        return 'Valor de Venda';
      case 'ticketAverage':
        return 'Ticket Médio';
      case 'pa':
        return 'PA';
      case 'points':
        return 'Pontos';
      case 'totalPrize':
        return 'Prêmio Total';
      default:
        return '';
    }
  };

  const formatValue = (value: number, currentCriterion: RankingCriterion) => {
    if (currentCriterion === 'pa') {
      return value.toFixed(1);
    }
    if (currentCriterion === 'points') {
      return value.toLocaleString('pt-BR');
    }
    return `R$ ${value.toLocaleString('pt-BR', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
  };

  const formatPrize = (value: number) => {
    return value.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'});
  };

  const getGoalProgress = (value: number, criterion: RankingCriterion) => {
    if (criterion === 'totalPrize')
      return {percent: 100, label: 'N/A', details: 'N/A'};
    const goals = goalsData[criterion];
    let nextGoal, currentGoalBase, nextGoalLabel, progress;

    if (value >= goals.lendaria.threshold) {
      return {
        percent: 100,
        label: `Nível Lendário Atingido!`,
        details: `${formatValue(value, criterion)}`,
      };
    }
    if (value >= goals.metona.threshold) {
      nextGoal = goals.lendaria.threshold;
      currentGoalBase = goals.metona.threshold;
      nextGoalLabel = 'Lendária';
    } else if (value >= goals.meta.threshold) {
      nextGoal = goals.metona.threshold;
      currentGoalBase = goals.meta.threshold;
      nextGoalLabel = 'Metona';
    } else if (value >= goals.metinha.threshold) {
      nextGoal = goals.meta.threshold;
      currentGoalBase = goals.metinha.threshold;
      nextGoalLabel = 'Meta';
    } else {
      nextGoal = goals.metinha.threshold;
      currentGoalBase = 0;
      nextGoalLabel = 'Metinha';
    }

    if (nextGoal - currentGoalBase <= 0) {
      progress = 100;
    } else {
      progress = Math.min(
        100,
        ((value - currentGoalBase) / (nextGoal - currentGoalBase)) * 100
      );
    }

    return {
      percent: progress,
      label: `Próximo Nível: ${nextGoalLabel}`,
      details: `${formatValue(value, criterion)} / ${formatValue(nextGoal, criterion)}`,
    };
  };
  
  const sellerData = sortedSellers.find(s => s.id === currentSeller.id);

  if (!sellerData) {
    return (
        <div className="flex items-center justify-center min-h-[400px]">
            <p>Carregando seus dados de performance...</p>
        </div>
    )
  }
  
  const sellerValue =
    criterion === 'totalPrize'
      ? sellerData.totalPrize
      : criterion === 'points'
      ? sellerData.points + sellerData.extraPoints
      : sellerData[criterion];

  const criterionGoals =
    criterion !== 'totalPrize' ? goalsData[criterion] : null;

  const allGoals: Array<{
    name: GoalLevelName;
    threshold: number;
    prize: number;
  }> = criterionGoals
    ? [
        {name: 'Metinha', ...criterionGoals.metinha},
        {name: 'Meta', ...criterionGoals.meta},
        {name: 'Metona', ...criterionGoals.metona},
        {name: 'Lendária', ...criterionGoals.lendaria},
      ]
    : [];

  const {percent, label, details} = getGoalProgress(
    sellerValue,
    criterion
  );

  const prizeToDisplay =
    criterion === 'totalPrize'
      ? sellerData.totalPrize
      : sellerData.prizes[criterion as keyof typeof sellerData.prizes] ||
        0;


  return (
    <div className="space-y-8">
      <div className="flex items-center gap-4">
        <Trophy className="size-8 text-primary" />
        <h1 className="text-3xl font-bold">Meu Desempenho</h1>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Sua Posição no Ranking Geral</CardTitle>
          <CardDescription>
            Sua classificação atual com base no critério:{' '}
            <span className="font-bold text-primary">
              {getCriterionLabel(criterion)}
            </span>
            .
          </CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-3xl font-bold">
            {currentUserRank > 0 ? (
              <>
                <span className="text-muted-foreground">Posição:</span>{' '}
                <span className="text-primary">{currentUserRank}º</span>
              </>
            ) : (
              'Carregando sua posição...'
            )}
          </p>
        </CardContent>
      </Card>

      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle>Filtros de Desempenho</CardTitle>
          <CardDescription>
            Selecione um critério para visualizar seus resultados em detalhes.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div>
            <Label className="text-sm font-medium mb-2 block">
              Critério de Análise
            </Label>
            <Tabs
              value={criterion}
              onValueChange={value => setCriterion(value as RankingCriterion)}
            >
              <TabsList className="grid w-full grid-cols-5 bg-input p-1 h-auto">
                <TabsTrigger
                  value="salesValue"
                  className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground rounded-md"
                >
                  <DollarSign className="mr-2 size-4" /> Vendas
                </TabsTrigger>
                <TabsTrigger
                  value="ticketAverage"
                  className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground rounded-md"
                >
                  <Ticket className="mr-2 size-4" /> Ticket Médio
                </TabsTrigger>
                <TabsTrigger
                  value="pa"
                  className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground rounded-md"
                >
                  <Box className="mr-2 size-4" /> PA
                </TabsTrigger>
                <TabsTrigger
                  value="points"
                  className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground rounded-md"
                >
                  <Star className="mr-2 size-4" /> Pontos
                </TabsTrigger>
                <TabsTrigger
                  value="totalPrize"
                  className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground rounded-md"
                >
                  <Trophy className="mr-2 size-4" /> Prêmio Total
                </TabsTrigger>
              </TabsList>
            </Tabs>
          </div>
        </CardContent>
      </Card>

      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle>Detalhes por {getCriterionLabel(criterion)}</CardTitle>
          <CardDescription>
            Seu resultado detalhado para o critério selecionado.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-8">
            <div className={cn(
                "grid gap-4",
                criterion === 'salesValue' ? "grid-cols-1" : "grid-cols-2"
            )}>
                {criterion !== 'salesValue' && (
                  <div className="flex flex-col space-y-1 rounded-lg border p-4">
                      <p className="text-sm text-muted-foreground">Seu Resultado</p>
                      <p className="text-3xl font-bold">
                          {formatValue(sellerValue, criterion)}
                      </p>
                  </div>
                )}
                 <div className="flex flex-col space-y-1 rounded-lg border p-4">
                    <p className="text-sm text-muted-foreground">Prêmio Recebido</p>
                    <p className="text-3xl font-bold text-green-400">{formatPrize(prizeToDisplay)}</p>
                </div>
            </div>

            {criterion !== 'totalPrize' && criterionGoals && (
            <>
                <div>
                    <h4 className="font-semibold mb-3">Níveis de Meta Atingidos</h4>
                    <div className="flex items-center gap-1.5 flex-wrap">
                        {allGoals.map((goal) => {
                        const isAchieved = sellerValue >= goal.threshold;
                        const config = goalLevelConfig[goal.name];
                        return (
                            <TooltipProvider key={goal.name}>
                            <Tooltip>
                                <TooltipTrigger asChild>
                                <Badge
                                    className={cn(
                                    'transition-all duration-300 ease-in-out',
                                    isAchieved
                                        ? `${config.className} scale-110 border-2 border-current shadow-lg`
                                        : 'bg-muted border-transparent text-muted-foreground opacity-60 hover:bg-muted'
                                    )}
                                >
                                    {goal.name}
                                </Badge>
                                </TooltipTrigger>
                                <TooltipContent>
                                <div className="space-y-1 text-xs text-left">
                                    <p className="font-semibold">
                                    {goal.name}
                                    </p>
                                    <p>
                                    Meta:{' '}
                                    {formatValue(
                                        goal.threshold,
                                        criterion
                                    )}
                                    </p>
                                    <p>
                                    Prêmio:{' '}
                                    <span className="font-bold text-green-400">
                                        {formatPrize(goal.prize)}
                                    </span>
                                    </p>
                                    {criterion === 'salesValue' &&
                                    goal.name === 'Lendária' &&
                                    goalsData.salesValue
                                        .performanceBonus && (
                                        <p className="text-xs italic text-primary/80 pt-1 border-t border-border/20 mt-1">
                                        Bônus: +
                                        {formatPrize(
                                            goalsData.salesValue
                                            .performanceBonus.prize
                                        )}{' '}
                                        a cada{' '}
                                        {formatPrize(
                                            goalsData.salesValue
                                            .performanceBonus.per
                                        )}{' '}
                                        extra
                                        </p>
                                    )}
                                    {criterion !== 'salesValue' && (
                                      <p>
                                      Seu valor:{' '}
                                      {formatValue(sellerValue, criterion)}
                                      </p>
                                    )}
                                    <p
                                    className={cn(
                                        'font-bold',
                                        isAchieved
                                        ? 'text-green-400'
                                        : 'text-yellow-400'
                                    )}
                                    >
                                    {isAchieved
                                        ? 'Atingida!'
                                        : 'Pendente'}
                                    </p>
                                </div>
                                </TooltipContent>
                            </Tooltip>
                            </TooltipProvider>
                        );
                        })}
                    </div>
                </div>

                <div>
                    <h4 className="font-semibold mb-3">Progresso para Próxima Meta</h4>
                    <TooltipProvider>
                        <Tooltip>
                        <TooltipTrigger asChild>
                            <div className="flex flex-col gap-1.5 text-left w-full">
                            <div className="flex justify-between items-center">
                                <span className="text-sm font-medium">
                                {label}
                                </span>
                                <span className="text-sm font-bold">
                                {percent.toFixed(0)}%
                                </span>
                            </div>
                            <Progress
                                value={percent}
                                className="h-3 [&>div]:bg-gradient-to-r [&>div]:from-primary [&>div]:to-purple-500"
                            />
                            </div>
                        </TooltipTrigger>
                        <TooltipContent>
                            <p>{details}</p>
                        </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                </div>
            </>
            )}
        </CardContent>
      </Card>
    </div>
  );
}

========================================
File: src/components/PerformanceChart.tsx
========================================
'use client';

import { Line, LineChart, CartesianGrid, XAxis, YAxis, ResponsiveContainer } from 'recharts';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  ChartTooltipContent,
  ChartTooltip,
  ChartContainer,
  ChartLegend,
  ChartLegendContent
} from '@/components/ui/chart';
import type { QuizResult } from '@/lib/types';

interface PerformanceChartProps {
  data: QuizResult[];
}

export default function PerformanceChart({ data }: PerformanceChartProps) {
  const chartData = data.map((res) => ({
    date: res.date,
    Pontuação: res.score,
    Total: res.total,
  }));

  const chartConfig = {
    Pontuação: {
      label: 'Sua Pontuação',
      color: 'hsl(var(--primary))',
    },
    Total: {
      label: 'Total de Perguntas',
      color: 'hsl(var(--muted-foreground))',
    },
  };

  return (
    <Card className="w-full mt-8 bg-card border-border">
      <CardHeader>
        <CardTitle>Histórico de Desempenho</CardTitle>
        <CardDescription>Sua pontuação nos últimos quizzes.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="h-[250px]">
          <ChartContainer config={chartConfig as any} className="h-full w-full">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart
                data={chartData}
                margin={{
                  top: 5,
                  right: 10,
                  left: -10,
                  bottom: 0,
                }}
              >
                <CartesianGrid strokeDasharray="3 3" vertical={false} />
                <XAxis
                  dataKey="date"
                  tickLine={false}
                  axisLine={false}
                  tickMargin={8}
                />
                <YAxis
                  allowDecimals={false}
                  tickLine={false}
                  axisLine={false}
                  tickMargin={8}
                  domain={[0, (dataMax: number) => Math.max(5, dataMax)]}
                />
                <ChartTooltip
                  cursor={false}
                  content={<ChartTooltipContent indicator="dot" />}
                />
                 <ChartLegend content={<ChartLegendContent />} />
                <Line
                  dataKey="Pontuação"
                  type="monotone"
                  stroke="var(--color-Pontuação)"
                  strokeWidth={3}
                  dot={{
                    r: 5,
                    fill: 'var(--color-Pontuação)',
                    strokeWidth: 2,
                    stroke: 'hsl(var(--background))'
                  }}
                />
                 <Line
                  dataKey="Total"
                  type="monotone"
                  stroke="var(--color-Total)"
                  strokeWidth={2}
                  strokeDasharray="5 5"
                  dot={false}
                />
              </LineChart>
            </ResponsiveContainer>
          </ChartContainer>
        </div>
      </CardContent>
    </Card>
  );
}

========================================
File: src/components/SalesOverviewChart.tsx
========================================
'use client';

import { Bar, BarChart, CartesianGrid, XAxis, ResponsiveContainer } from 'recharts';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  ChartTooltipContent,
  ChartTooltip,
  ChartContainer
} from '@/components/ui/chart';
import type { Seller } from '@/lib/types';

interface SalesOverviewChartProps {
  sellers: Seller[];
}

export default function SalesOverviewChart({ sellers }: SalesOverviewChartProps) {
    const chartData = sellers.map(seller => ({
        name: seller.name.split(' ')[0],
        vendas: seller.salesValue,
    })).sort((a,b) => b.vendas - a.vendas);

    const chartConfig = {
        vendas: {
            label: 'Vendas',
            color: 'hsl(var(--primary))',
        },
    };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Visão Geral de Vendas</CardTitle>
        <CardDescription>Comparativo de vendas por vendedor no mês atual.</CardDescription>
      </CardHeader>
      <CardContent className="pl-2">
        <ChartContainer config={chartConfig as any} className="h-[300px] w-full">
            <ResponsiveContainer width="100%" height="100%">
            <BarChart 
                data={chartData}
                margin={{ top: 10, right: 10, left: 0, bottom: 0 }}
                layout="horizontal"
            >
                <CartesianGrid strokeDasharray="3 3" vertical={false} />
                <XAxis
                    dataKey="name"
                    tickLine={false}
                    axisLine={false}
                    tickMargin={8}
                />
                <ChartTooltip
                    cursor={false}
                    content={<ChartTooltipContent
                        formatter={(value) => typeof value === 'number' ? value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }) : value}
                        indicator="dot"
                    />}
                />
                <Bar dataKey="vendas" fill="var(--color-vendas)" radius={[4, 4, 0, 0]} />
            </BarChart>
            </ResponsiveContainer>
        </ChartContainer>
      </CardContent>
    </Card>
  );
}

========================================
File: src/components/ai-insights.tsx
========================================
'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { analyzeSalesTrends } from '@/ai/flows/analyze-sales-trends';
import type { AnalyzeSalesTrendsOutput } from '@/lib/types';
import { SalesEntry } from '@/lib/types';
import { Lightbulb, Loader2, Sparkles } from 'lucide-react';

type AiInsightsProps = {
  salesData: SalesEntry[];
  analysis: AnalyzeSalesTrendsOutput | null;
  setAnalysis: (analysis: AnalyzeSalesTrendsOutput | null) => void;
};

export default function AiInsights({ salesData, analysis, setAnalysis }: AiInsightsProps) {
  const [timeFrame, setTimeFrame] = useState<'weekly' | 'monthly'>('monthly');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleAnalyze = async () => {
    if (salesData.length < 2) {
      toast({
        variant: 'destructive',
        title: 'Not Enough Data',
        description: 'Please add at least two sales entries to perform an analysis.',
      });
      return;
    }

    setIsLoading(true);
    setAnalysis(null);

    try {
      const result = await analyzeSalesTrends({
        salesData: JSON.stringify(salesData),
        timeFrame,
      });
      setAnalysis(result);
    } catch (error) {
      console.error('AI analysis failed:', error);
      toast({
        variant: 'destructive',
        title: 'Analysis Failed',
        description: 'There was an error analyzing the sales data. Please try again.',
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="lg:col-span-2">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <div>
          <CardTitle className="text-sm font-medium">AI-Powered Insights</CardTitle>
          <CardDescription className="text-xs">Analyze trends in your sales data</CardDescription>
        </div>
        <Lightbulb className="h-4 w-4 text-muted-foreground" />
      </CardHeader>
      <CardContent>
        <div className="flex flex-col space-y-4">
            <div className="flex items-center space-x-2">
                <Select value={timeFrame} onValueChange={(value) => setTimeFrame(value as 'weekly' | 'monthly')}>
                    <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="Select time frame" />
                    </SelectTrigger>
                    <SelectContent>
                    <SelectItem value="weekly">Weekly</SelectItem>
                    <SelectItem value="monthly">Monthly</SelectItem>
                    </SelectContent>
                </Select>
                <Button onClick={handleAnalyze} disabled={isLoading} className="flex-grow">
                    {isLoading ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    ) : (
                    <Sparkles className="mr-2 h-4 w-4" />
                    )}
                    Analyze Sales
                </Button>
            </div>
            {analysis && (
                <div className="space-y-4 pt-4 border-t">
                    <div>
                        <h4 className="font-semibold">Summary</h4>
                        <p className="text-sm text-muted-foreground">{analysis.summary}</p>
                    </div>
                    <div>
                        <h4 className="font-semibold">Top Products</h4>
                        <p className="text-sm text-muted-foreground">{analysis.topProducts}</p>
                    </div>
                    <div>
                        <h4 className="font-semibold">Key Insights</h4>
                        <p className="text-sm text-muted-foreground">{analysis.insights}</p>
                    </div>
                </div>
            )}
        </div>
      </CardContent>
    </Card>
  );
}

========================================
File: src/components/header.tsx
========================================
'use client';

import Link from 'next/link';
import { TrendingUp } from 'lucide-react';
import { Button } from '@/components/ui/button';

export default function Header() {
  return (
    <header className="sticky top-0 flex h-16 items-center gap-4 border-b bg-background px-4 md:px-6 z-50">
      <nav className="hidden flex-col gap-6 text-lg font-medium md:flex md:flex-row md:items-center md:gap-5 md:text-sm lg:gap-6">
        <Link href="#" className="flex items-center gap-2 text-lg font-semibold md:text-base">
          <TrendingUp className="h-6 w-6 text-primary" />
          <span className="font-headline">Sales Insights Tracker</span>
        </Link>
      </nav>
      <div className="flex w-full items-center gap-4 md:ml-auto md:gap-2 lg:gap-4">
        <div className="ml-auto flex-1 sm:flex-initial">
          {/* Future search bar could go here */}
        </div>
        <Link href="/login" passHref>
           <Button variant="outline">Login</Button>
        </Link>
      </div>
    </header>
  );
}

========================================
File: src/components/icons/logo.tsx
========================================
'use client';

import * as React from 'react';
import { useState, useEffect } from 'react';

export const Logo = (props: React.SVGProps<SVGSVGElement>) => {
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);

  if (!isClient) {
    // Render an empty SVG with the same dimensions to hold the space during SSR
    // and prevent layout shift, while avoiding hydration errors from complex styles.
    return (
      <svg
        width="75"
        height="45"
        viewBox="0 0 258 155"
        xmlns="http://www.w3.org/2000/svg"
        {...props}
      />
    );
  }

  return (
    <svg
      width="75"
      height="45"
      viewBox="0 0 258 155"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <text
        y="65"
        style={{
          fontSize: 75,
          fill: '#e54d6e',
          fontFamily: 'Inter, sans-serif',
          fontWeight: 800,
          letterSpacing: '-0.02em',
        }}
      >
        super
      </text>
      <text
        y="130"
        style={{
          fontSize: 75,
          fill: '#5b67ae',
          fontFamily: 'Inter, sans-serif',
          fontWeight: 800,
          letterSpacing: '-0.02em',
        }}
      >
        moda
      </text>
      <text
        x="85"
        y="152"
        style={{
          fontSize: 25,
          fill: '#646464',
          fontFamily: 'Inter, sans-serif',
          fontWeight: 400,
        }}
      >
        calçados
      </text>
    </svg>
  );
};

========================================
File: src/components/quiz.tsx
========================================
'use client';

import React, { useState, useEffect, useContext } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { generateQuiz } from '@/ai/flows/generate-quiz-flow';
import type { GenerateQuizOutput, QuizResult, QuizQuestion } from '@/lib/types';
import { Loader2, Sparkles, Trophy, RotateCcw, ArrowLeft } from 'lucide-react';
import { cn } from '@/lib/utils';
import PerformanceChart from './PerformanceChart';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { SellerContext } from '@/app/seller/layout';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const saveResultToLocalStorage = (result: QuizResult) => {
  if (typeof window === 'undefined') return;
  const stored = localStorage.getItem('quizResults');
  const results: QuizResult[] = stored ? JSON.parse(stored) : [];
  results.unshift(result);
  localStorage.setItem('quizResults', JSON.stringify(results.slice(0, 5)));
};

const getResultsFromLocalStorage = (): QuizResult[] => {
  if (typeof window === 'undefined') return [];
  const stored = localStorage.getItem('quizResults');
  return stored ? JSON.parse(stored) : [];
};

type Difficulty = 'Fácil' | 'Médio' | 'Difícil';
const difficultyConfig: Record<Difficulty, { points: number }> = {
  'Fácil': { points: 10 },
  'Médio': { points: 20 },
  'Difícil': { points: 30 },
};

export default function Quiz() {
  const sellerContext = useContext(SellerContext);
  const isSellerView = !!sellerContext;
  const { currentSeller, setSellers } = sellerContext || {};
  
  const [quiz, setQuiz] = useState<GenerateQuizOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [score, setScore] = useState(0);
  const [showFeedback, setShowFeedback] = useState(false);
  const [isFinished, setIsFinished] = useState(false);
  const [difficulty, setDifficulty] = useState<Difficulty>('Médio');
  const { toast } = useToast();
  const [quizHistory, setQuizHistory] = useState<QuizResult[]>([]);

  useEffect(() => {
    setQuizHistory(getResultsFromLocalStorage());
  }, [isFinished]);

  const handleStartQuiz = async () => {
    if (isSellerView && currentSeller?.hasCompletedQuiz) {
        toast({ variant: 'destructive', title: 'Quiz já realizado', description: 'Você pode realizar o quiz apenas uma vez por dia.' });
        return;
    }
    setIsLoading(true);
    setQuiz(null);
    setCurrentQuestionIndex(0);
    setScore(0);
    setSelectedAnswer(null);
    setShowFeedback(false);
    setIsFinished(false);

    // The seed is composed to ensure uniqueness per seller, per day, and per difficulty level.
    // For non-sellers (e.g., admin testing), a simple timestamp is used for randomness.
    const seed = isSellerView && currentSeller
      ? `${new Date().toISOString().split('T')[0]}-${currentSeller.id}-${difficulty}`
      : new Date().getTime().toString();

    try {
      const result = await generateQuiz({
        topic: 'Técnicas de Venda e Conhecimento de Produtos em Lojas de Calçados',
        numberOfQuestions: 5,
        difficulty: difficulty,
        seed: seed,
      });

      if (result.questions.length > 0) {
        setQuiz(result);
      } else {
        throw new Error('Quiz vazio retornado pelo fallback.');
      }
    } catch (error) {
      console.error('❌ Erro ao gerar quiz:', error);
      toast({
        variant: 'destructive',
        title: 'Falha ao Gerar Quiz',
        description: 'A IA não conseguiu gerar o conteúdo. Um quiz de emergência foi carregado.',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleAnswerSubmit = () => {
    if (selectedAnswer === null) return;
    setShowFeedback(true);
    if (selectedAnswer === quiz!.questions[currentQuestionIndex].correctAnswerIndex) {
      setScore(prev => prev + 1);
    }
  };

  const handleNextQuestion = async () => {
    setShowFeedback(false);
    setSelectedAnswer(null);
    if (currentQuestionIndex < quiz!.questions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1);
    } else {
      setIsFinished(true);
      const pointsPerCorrectAnswer = difficultyConfig[difficulty].points;
      const pointsEarned = score * pointsPerCorrectAnswer;

      const finalResult: QuizResult = {
        score: score,
        total: quiz!.questions.length,
        date: new Date().toLocaleDateString('pt-BR'),
      };
      
      if (isSellerView && setSellers && currentSeller) {
        setSellers(prevSellers =>
            prevSellers.map(seller =>
                seller.id === currentSeller.id
                ? { ...seller, points: seller.points + pointsEarned, hasCompletedQuiz: true }
                : seller
            )
        );
        toast({
            title: "Pontuação Registrada!",
            description: `${currentSeller?.name} ganhou ${pointsEarned} pontos.`,
        });
      }

      saveResultToLocalStorage(finalResult);
      if (isSellerView && currentSeller) {
        try {
          await addDoc(collection(db, 'quiz-results'), {...finalResult, sellerId: currentSeller.id, sellerName: currentSeller?.name, difficulty: difficulty });
          console.log('🔥 Resultado salvo no Firestore!');
        } catch (err) {
          console.error('❌ Erro ao salvar no Firestore:', err);
        }
      }
    }
  };

  const handleReset = () => {
    setQuiz(null);
    setIsFinished(false);
    setCurrentQuestionIndex(0);
    setScore(0);
    setSelectedAnswer(null);
    setShowFeedback(false);
  }

  const currentQuestion: QuizQuestion | null = quiz ? quiz.questions[currentQuestionIndex] : null;

  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center p-8 text-center text-muted-foreground">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <p className="mt-4 font-semibold">Gerando um novo quiz para você...</p>
        <p className="text-sm">Isso pode levar alguns segundos.</p>
      </div>
    );
  }

  if (isFinished) {
    const pointsEarned = score * difficultyConfig[difficulty].points;
    return (
      <div className="flex flex-col items-center justify-center p-8 text-center">
        <Trophy className="h-16 w-16 text-yellow-400" />
        <h2 className="mt-4 text-2xl font-bold">Quiz Finalizado!</h2>
        <p className="text-muted-foreground mt-2">
          {isSellerView && currentSeller ? `${currentSeller.name} acertou ${score} de ${quiz!.questions.length} perguntas e ganhou ${pointsEarned} pontos!` : `Você acertou ${score} de ${quiz!.questions.length} perguntas.`}
        </p>

        <PerformanceChart data={quizHistory} />

        <Button onClick={handleReset} className="mt-6">
          <ArrowLeft className="mr-2" /> Voltar ao Início
        </Button>
      </div>
    );
  }

  if (!quiz || !currentQuestion) {
    const hasCompleted = isSellerView && currentSeller?.hasCompletedQuiz;
    return (
      <div className="flex flex-col items-center justify-center p-8 text-center">
        <h2 className="text-xl font-bold">Pronto para o Desafio?</h2>
        <p className="text-muted-foreground mt-2 max-w-md">
          {isSellerView
            ? 'Gere seu quiz único e aleatório de hoje. Ele é personalizado para você e não se repetirá. Você tem apenas uma tentativa por dia.'
            : 'Gere um quiz para testar seus conhecimentos.'}
        </p>

        <div className="space-y-4 my-6 w-full max-w-sm">
             <div className="space-y-2">
                <Label htmlFor="difficulty-select">Nível de Dificuldade</Label>
                <Select value={difficulty} onValueChange={(val) => setDifficulty(val as Difficulty)} disabled={hasCompleted}>
                    <SelectTrigger id="difficulty-select">
                        <SelectValue placeholder="Selecione o nível..." />
                    </SelectTrigger>
                    <SelectContent>
                        {Object.keys(difficultyConfig).map(level => (
                            <SelectItem key={level} value={level}>{level}</SelectItem>
                        ))}
                    </SelectContent>
                </Select>
            </div>
             <p className="text-xs text-muted-foreground pt-1">
              Pontuação por acerto: 
              <span className="font-bold text-green-400 ml-1">
                Fácil: 10pts | Médio: 20pts | Difícil: 30pts
              </span>
            </p>
        </div>

        <Button onClick={handleStartQuiz} disabled={isLoading || hasCompleted} className="mt-6 bg-gradient-to-r from-blue-500 to-purple-600 text-primary-foreground font-semibold">
          {hasCompleted ? <><Trophy className="mr-2"/> Quiz do Dia Concluído</> : <><Sparkles className="mr-2" /> Iniciar Quiz</>}
        </Button>
        {hasCompleted && <p className="text-xs text-muted-foreground mt-2">Você já ganhou seus pontos neste desafio hoje.</p>}
      </div>
    );
  }

  return (
    <div className="p-4 space-y-6" key={currentQuestionIndex}>
      <div className="flex justify-between items-center">
        <CardTitle className="text-xl">Quiz: {quiz.title}</CardTitle>
        <div className="text-sm font-medium text-muted-foreground">Pergunta {currentQuestionIndex + 1} de {quiz.questions.length}</div>
      </div>

      <div>
        <h3 className="text-lg font-semibold">{currentQuestion.questionText}</h3>
        <RadioGroup
          value={selectedAnswer?.toString()}
          onValueChange={(value) => setSelectedAnswer(parseInt(value, 10))}
          disabled={showFeedback}
          className="mt-4 space-y-3"
        >
          {currentQuestion.options.map((option, index) => {
            const isCorrect = index === currentQuestion.correctAnswerIndex;
            const isSelected = index === selectedAnswer;

            let variant = '';
            if (showFeedback) {
              if (isCorrect) variant = 'border-green-500 bg-green-500/10 text-primary';
              else if (isSelected) variant = 'border-destructive bg-destructive/10';
            }

            return (
              <Label
                key={index}
                htmlFor={`option-${index}`}
                className={cn(
                  "flex items-center p-4 rounded-lg border-2 cursor-pointer transition-colors",
                  "hover:bg-accent/50",
                  variant
                )}
              >
                <RadioGroupItem value={index.toString()} id={`option-${index}`} />
                <span className="ml-4 text-base">{option}</span>
              </Label>
            );
          })}
        </RadioGroup>
      </div>

      {showFeedback && (
        <Card className={cn(
          "border-2",
          selectedAnswer === currentQuestion.correctAnswerIndex ? 'border-green-500' : 'border-destructive'
        )}>
          <CardHeader>
            <CardTitle className={cn(
              "text-lg",
              selectedAnswer === currentQuestion.correctAnswerIndex ? 'text-green-500' : 'text-destructive'
            )}>
              {selectedAnswer === currentQuestion.correctAnswerIndex ? 'Resposta Correta!' : 'Resposta Incorreta!'}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-muted-foreground">{currentQuestion.explanation}</p>
          </CardContent>
        </Card>
      )}

      <div className="flex justify-end">
        {showFeedback ? (
          <Button onClick={handleNextQuestion}>
            {currentQuestionIndex < quiz.questions.length - 1 ? 'Próxima Pergunta' : 'Finalizar Quiz'}
          </Button>
        ) : (
          <Button onClick={handleAnswerSubmit} disabled={selectedAnswer === null}>
            Confirmar Resposta
          </Button>
        )}
      </div>
    </div>
  );
}

========================================
File: src/components/sales-chart.tsx
========================================
'use client';

import { Line, LineChart, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  ChartTooltipContent,
  ChartTooltip,
  ChartContainer
} from '@/components/ui/chart';
import { SalesEntry } from '@/lib/types';
import { format } from 'date-fns';

type SalesChartProps = {
  salesData: SalesEntry[];
};

export default function SalesChartComponent({ salesData }: SalesChartProps) {
  const chartData = salesData.map(entry => ({
    date: format(entry.date, 'MMM d'),
    salesValue: entry.salesValue,
  }));

  return (
    <Card>
      <CardHeader>
        <CardTitle>Sales Value Over Time</CardTitle>
        <CardDescription>A chart showing the trend of sales value.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="h-[300px]">
         <ChartContainer config={{
            salesValue: {
              label: "Sales",
              color: "hsl(var(--accent))",
            },
         }}>
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={chartData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" vertical={false} />
                 <XAxis 
                  dataKey="date" 
                  tickLine={false}
                  axisLine={false}
                  tickMargin={8}
                  tickFormatter={(value) => value.slice(0, 6)}
                />
                <YAxis 
                  tickLine={false}
                  axisLine={false}
                  tickMargin={8}
                  tickFormatter={(value) => `$${value / 1000}k`}
                />
                <Tooltip
                  cursor={{
                    stroke: 'hsl(var(--border))',
                    strokeWidth: 2,
                    strokeDasharray: '3 3',
                  }}
                  content={<ChartTooltipContent
                    formatter={(value) => `$${value.toLocaleString()}`}
                    indicator="dot" 
                   />}
                />
                <Line
                  type="monotone"
                  dataKey="salesValue"
                  stroke="hsl(var(--primary))"
                  strokeWidth={2}
                  dot={false}
                />
              </LineChart>
            </ResponsiveContainer>
          </ChartContainer>
        </div>
      </CardContent>
    </Card>
  );
}

========================================
File: src/components/sales-form.tsx
========================================
'use client';

import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { cn } from '@/lib/utils';
import { CalendarIcon, PlusCircle } from 'lucide-react';
import { format } from 'date-fns';
import type { SalesEntry } from '@/lib/types';

const formSchema = z.object({
  date: z.date({
    required_error: 'A date is required.',
  }),
  salesValue: z.coerce.number().min(0, { message: 'Sales value must be positive.' }),
  ticketAverage: z.coerce.number().min(0, { message: 'Ticket average must be positive.' }),
  productsPerService: z.coerce.number().min(0, { message: 'Products per service must be positive.' }),
});

type SalesFormProps = {
  onSaleAdd: (data: Omit<SalesEntry, 'id'>) => void;
};

export default function SalesForm({ onSaleAdd }: SalesFormProps) {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      date: new Date(),
      salesValue: 0,
      ticketAverage: 0,
      productsPerService: 0,
    },
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    onSaleAdd(values);
    form.reset();
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Add New Sale</CardTitle>
        <CardDescription>Enter the details for a new sales entry.</CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="grid gap-4">
            <FormField
              control={form.control}
              name="date"
              render={({ field }) => (
                <FormItem className="flex flex-col">
                  <FormLabel>Date</FormLabel>
                  <Popover>
                    <PopoverTrigger asChild>
                      <FormControl>
                        <Button
                          variant={'outline'}
                          className={cn(
                            'pl-3 text-left font-normal',
                            !field.value && 'text-muted-foreground'
                          )}
                        >
                          {field.value ? format(field.value, 'PPP') : <span>Pick a date</span>}
                          <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                        </Button>
                      </FormControl>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={field.value}
                        onSelect={field.onChange}
                        disabled={(date) => date > new Date() || date < new Date('1900-01-01')}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="salesValue"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Sales Value ($)</FormLabel>
                  <FormControl>
                    <Input type="number" placeholder="e.g., 1500.50" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="ticketAverage"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Ticket Average ($)</FormLabel>
                  <FormControl>
                    <Input type="number" placeholder="e.g., 75.25" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="productsPerService"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Products Per Service (PPA)</FormLabel>
                  <FormControl>
                    <Input type="number" placeholder="e.g., 2.5" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" className="w-full mt-2">
              <PlusCircle className="mr-2 h-4 w-4" /> Add Entry
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}

========================================
File: src/components/sales-table.tsx
========================================
'use client';

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { SalesEntry } from '@/lib/types';
import { format } from 'date-fns';

type SalesTableProps = {
  salesData: SalesEntry[];
};

export default function SalesTable({ salesData }: SalesTableProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Sales Entries</CardTitle>
        <CardDescription>A list of recent sales records.</CardDescription>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[300px]">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Date</TableHead>
                <TableHead className="text-right">Sales Value</TableHead>
                <TableHead className="text-right">Ticket Average</TableHead>
                <TableHead className="text-right">PPA</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {salesData.length > 0 ? (
                salesData.map((entry) => (
                  <TableRow key={entry.id}>
                    <TableCell>{format(entry.date, 'MMM d, yyyy')}</TableCell>
                    <TableCell className="text-right">
                      ${entry.salesValue.toFixed(2)}
                    </TableCell>
                    <TableCell className="text-right">
                      ${entry.ticketAverage.toFixed(2)}
                    </TableCell>
                    <TableCell className="text-right">
                      {entry.productsPerService.toFixed(2)}
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={4} className="text-center">
                    No sales data available.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </ScrollArea>
      </CardContent>
    </Card>
  );
}

========================================
File: src/components/ui/accordion.tsx
========================================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

========================================
File: src/components/ui/alert-dialog.tsx
========================================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

========================================
File: src/components/ui/alert.tsx
========================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

========================================
File: src/components/ui/avatar.tsx
========================================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

========================================
File: src/components/ui/badge.tsx
========================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

========================================
File: src/components/ui/button.tsx
========================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

========================================
File: src/components/ui/calendar.tsx
========================================
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

========================================
File: src/components/ui/card.tsx
========================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

========================================
File: src/components/ui/carousel.tsx
========================================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

========================================
File: src/components/ui/chart.tsx
========================================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

========================================
File: src/components/ui/checkbox.tsx
========================================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

========================================
File: src/components/ui/collapsible.tsx
========================================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

========================================
File: src/components/ui/dialog.tsx
========================================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

========================================
File: src/components/ui/dropdown-menu.tsx
========================================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&>svg]:pointer-events-none [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:pointer-events-none [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

========================================
File: src/components/ui/form.tsx
========================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

========================================
File: src/components/ui/input.tsx
========================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

========================================
File: src/components/ui/label.tsx
========================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

========================================
File: src/components/ui/menubar.tsx
========================================
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

========================================
File: src/components/ui/popover.tsx
========================================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

========================================
File: src/components/ui/progress.tsx
========================================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

========================================
File: src/components/ui/radio-group.tsx
========================================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

========================================
File: src/components/ui/scroll-area.tsx
========================================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

========================================
File: src/components/ui/select.tsx
========================================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

========================================
File: src/components/ui/separator.tsx
========================================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

========================================
File: src/components/ui/sheet.tsx
========================================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

========================================
File: src/components/ui/sidebar.tsx
========================================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

========================================
File: src/components/ui/skeleton.tsx
========================================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

========================================
File: src/components/ui/slider.tsx
========================================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

========================================
File: src/components/ui/switch.tsx
========================================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

========================================
File: src/components/ui/table.tsx
========================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

========================================
File: src/components/ui/tabs.tsx
========================================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

========================================
File: src/components/ui/textarea.tsx
========================================
import * as React from 'react';

import {cn} from '@/lib/utils';

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(
  ({className, ...props}, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export {Textarea};

========================================
File: src/components/ui/toast.tsx
========================================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

========================================
File: src/components/ui/toaster.tsx
========================================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

========================================
File: src/components/ui/tooltip.tsx
========================================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

========================================
File: src/hooks/use-mobile.tsx
========================================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

========================================
File: src/hooks/use-toast.ts
========================================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

========================================
File: src/lib/data.ts
========================================
import type { Seller, Goals, Mission } from './types';

export const sellersData: Seller[] = [
  { id: '1', name: 'Rian Breston', nickname: 'rianb', email: 'rian.breston@example.com', password: '123', salesValue: 7540.75, ticketAverage: 150.25, pa: 2.1, points: 1200, extraPoints: 100, hasCompletedQuiz: false },
  { id: '2', name: 'Carla Dias', nickname: 'carlad', email: 'carla.dias@example.com', password: '123', salesValue: 4890.50, ticketAverage: 142.80, pa: 2.5, points: 950, extraPoints: 50, hasCompletedQuiz: false },
  { id: '3', name: 'Marcos Andrade', nickname: 'marcosa', email: 'marcos.andrade@example.com', password: '123', salesValue: 6100.00, ticketAverage: 185.00, pa: 1.9, points: 1500, extraPoints: 0, hasCompletedQuiz: false },
  { id: '4', name: 'Ana Pereira', nickname: 'anap', email: 'ana.pereira@example.com', password: '123', salesValue: 5800.00, ticketAverage: 190.50, pa: 2.0, points: 1350, extraPoints: 200, hasCompletedQuiz: false },
  { id: '5', name: 'Lucas Martins', nickname: 'lucasm', email: 'lucas.martins@example.com', password: '123', salesValue: 4200.20, ticketAverage: 120.70, pa: 2.9, points: 1800, extraPoints: 0, hasCompletedQuiz: false },
];

export const goalsData: Goals = {
  salesValue: {
    metinha: { threshold: 4000, prize: 50 },
    meta: { threshold: 5000, prize: 100 },
    metona: { threshold: 6000, prize: 150 },
    lendaria: { threshold: 7000, prize: 250 },
    performanceBonus: { per: 1000, prize: 50 },
  },
  ticketAverage: {
    metinha: { threshold: 130, prize: 20 },
    meta: { threshold: 150, prize: 40 },
    metona: { threshold: 180, prize: 60 },
    lendaria: { threshold: 200, prize: 100 },
  },
  pa: {
    metinha: { threshold: 2.0, prize: 20 },
    meta: { threshold: 2.5, prize: 40 },
    metona: { threshold: 2.8, prize: 60 },
    lendaria: { threshold: 3.0, prize: 100 },
  },
  points: {
    metinha: { threshold: 800, prize: 20 },
    meta: { threshold: 1000, prize: 40 },
    metona: { threshold: 1500, prize: 60 },
    lendaria: { threshold: 2000, prize: 100 },
  },
};

export const missionsData: Mission[] = [
  {
    id: '1',
    name: 'Vendedor do Mês',
    description: 'Atingir o topo do ranking de vendas no final do mês.',
    rewardValue: 500,
    rewardType: 'points',
    startDate: new Date(2024, 6, 1),
    endDate: new Date(2024, 6, 31),
  },
  {
    id: '2',
    name: 'Especialista em PA',
    description: 'Manter um PA (Produtos por Atendimento) acima de 2.8 por uma semana.',
    rewardValue: 250,
    rewardType: 'points',
    startDate: new Date(2024, 6, 15),
    endDate: new Date(2024, 6, 22),
  },
   {
    id: '3',
    name: 'Mestre dos Quizzes',
    description: 'Completar 3 quizzes com uma pontuação perfeita.',
    rewardValue: 150,
    rewardType: 'points',
    startDate: new Date(2024, 6, 1),
    endDate: new Date(2024, 7, 31),
  },
  {
    id: '4',
    name: 'Bônus de Equipe: Metinha Batida',
    description: 'Se todos os vendedores atingirem a Metinha em Vendas, todos ganham um bônus extra.',
    rewardValue: 100,
    rewardType: 'cash',
    startDate: new Date(2024, 6, 1),
    endDate: new Date(2024, 6, 31),
  },
];

========================================
File: src/lib/firebase.ts
========================================
import { initializeApp, getApps, getApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';

// IMPORTANT: Replace these placeholder values with your actual Firebase project configuration.
// You can find this in your Firebase project settings (Project Settings > General).
const firebaseConfig = {
  apiKey: 'YOUR_API_KEY',
  authDomain: 'YOUR_PROJECT_ID.firebaseapp.com',
  projectId: 'YOUR_PROJECT_ID',
  storageBucket: 'YOUR_PROJECT_ID.appspot.com',
  messagingSenderId: 'YOUR_SENDER_ID',
  appId: 'YOUR_APP_ID',
};

// Initialize Firebase
let app;

// This check prevents the app from being initialized multiple times,
// which can happen in a development environment with hot-reloading.
if (!getApps().length) {
  app = initializeApp(firebaseConfig);
} else {
  app = getApp();
}

export const db = getFirestore(app);

========================================
File: src/lib/store.ts
========================================
'use client';

import { useState, useEffect } from 'react';
import type { Seller, Goals, Mission, Admin } from './types';
import { sellersData as initialSellers, goalsData as initialGoals, missionsData as initialMissions } from './data';

// This is a simple in-memory store to simulate a database for the prototype.
// It allows state to be shared between the Admin and Seller layouts,
// ensuring data consistency across the application.

type AppState = {
  sellers: Seller[];
  goals: Goals;
  missions: Mission[];
  adminUser: Admin;
};

// The single source of truth for our application's state.
// Changed to `let` to allow reassignment for immutability.
let state: AppState = {
  sellers: initialSellers,
  goals: initialGoals,
  missions: initialMissions,
  adminUser: {
    nickname: 'admin',
    email: 'admin@aceleragtsupermoda.com',
    password: 'admin',
  },
};

const listeners = new Set<() => void>();

const notifyListeners = () => {
  listeners.forEach(listener => listener());
};

export const dataStore = {
  getState: () => state,
  
  // Each setter takes an updater function, similar to React's useState,
  // to prevent race conditions and ensure state updates are atomic.
  // Updates now create a new state object to ensure immutability.
  setSellers: (updater: (prev: Seller[]) => Seller[]) => {
    state = { ...state, sellers: updater(state.sellers) };
    notifyListeners();
  },
  
  setGoals: (updater: (prev: Goals) => Goals) => {
    state = { ...state, goals: updater(state.goals) };
    notifyListeners();
  },

  setMissions: (updater: (prev: Mission[]) => Mission[]) => {
    state = { ...state, missions: updater(state.missions) };
    notifyListeners();
  },

  setAdminUser: (updater: (prev: Admin) => Admin) => {
    state = { ...state, adminUser: updater(state.adminUser) };
    notifyListeners();
  },

  // Subscribes a component to store changes.
  subscribe: (listener: () => void) => {
    listeners.add(listener);
    // Returns an unsubscribe function to be called on component unmount.
    return () => {
      listeners.delete(listener);
    };
  },
};

// Custom hook to use the store in React components.
// It subscribes to the store and re-renders the component when the selected state changes.
export function useStore<T>(selector: (state: AppState) => T): T {
  const [data, setData] = useState(() => selector(dataStore.getState()));

  useEffect(() => {
    const unsubscribe = dataStore.subscribe(() => {
      const newState = selector(dataStore.getState());
      setData(newState);
    });
    // The selector function is the only dependency that should trigger a re-subscription.
    // This prevents unnecessary re-subscriptions on re-render.
    return unsubscribe;
  }, [selector]);

  return data;
}

========================================
File: src/lib/types.ts
========================================
import {z} from 'zod';

export type SalesEntry = {
  id: string;
  date: Date;
  salesValue: number;
  ticketAverage: number;
  productsPerService: number;
};

export type Seller = {
  id: string;
  name: string;
  nickname?: string;
  email?: string;
  password?: string;
  salesValue: number;
  ticketAverage: number;
  pa: number;
  points: number;
  extraPoints: number;
  hasCompletedQuiz?: boolean;
  lastCourseCompletionDate?: string; // YYYY-MM-DD
};

export type Admin = {
  nickname: string;
  email?: string;
  password: string;
};

export type GoalLevel = {
  threshold: number;
  prize: number;
};

export type GoalLevels = {
  metinha: GoalLevel;
  meta: GoalLevel;
  metona: GoalLevel;
  lendaria: GoalLevel;
};

export type SalesValueGoals = GoalLevels & {
  performanceBonus?: {
    per: number;
    prize: number;
  };
};

export type Goals = {
  salesValue: SalesValueGoals;
  ticketAverage: GoalLevels;
  pa: GoalLevels;
  points: GoalLevels;
};


export type Mission = {
  id: string;
  name: string;
  description: string;
  rewardValue: number;
  rewardType: 'points' | 'cash';
  startDate: Date;
  endDate: Date;
};

// AI Flow Schemas

// Analyze Sales Trends
export const AnalyzeSalesTrendsInputSchema = z.object({
  salesData: z
    .string()
    .describe(
      `Sales data in JSON format containing sales value, ticket average, and products per service.
      Example: [{
        "date": "2024-01-01",
        "salesValue": 1000,
        "ticketAverage": 100,
        "productsPerService": 2
      }]`
    ),
  timeFrame: z.enum(['weekly', 'monthly']).describe('Time frame for analysis.'),
});
export type AnalyzeSalesTrendsInput = z.infer<typeof AnalyzeSalesTrendsInputSchema>;

export const AnalyzeSalesTrendsOutputSchema = z.object({
  summary: z.string().describe('A summary of the sales trends and anomalies.'),
  topProducts: z.string().describe('List of top-performing products based on the sales data.'),
  insights: z.string().describe('Key insights into what is driving sales performance.'),
});
export type AnalyzeSalesTrendsOutput = z.infer<typeof AnalyzeSalesTrendsOutputSchema>;


// Generate Quiz (For Quiz Page)
export const QuizQuestionSchema = z.object({
  questionText: z.string().describe('The text of the quiz question.'),
  options: z.array(z.string()).min(4).max(4).describe('A list of four possible answers for the question.'),
  correctAnswerIndex: z.number().describe('The index of the correct answer in the options array.'),
  explanation: z.string().describe('A brief explanation of why the correct answer is right.'),
});

export const GenerateQuizInputSchema = z.object({
  topic: z.string().describe('The topic for the quiz.'),
  numberOfQuestions: z.number().min(1).max(10).describe('The number of questions to generate.'),
  difficulty: z.enum(['Fácil', 'Médio', 'Difícil']).describe('The difficulty level for the quiz.'),
  seed: z.string().optional().describe('An optional seed for controlling randomness and uniqueness.'),
});
export type GenerateQuizInput = z.infer<typeof GenerateQuizInputSchema>;

export const GenerateQuizOutputSchema = z.object({
  title: z.string().describe('The title of the quiz.'),
  questions: z.array(QuizQuestionSchema),
});
export type GenerateQuizOutput = z.infer<typeof GenerateQuizOutputSchema>;


// Generate Course (For Academia Page)
export const CourseQuizQuestionSchema = z.object({
  question: z.string(),
  options: z.array(z.string()),
  correctAnswerIndex: z.number(),
  explanation: z.string(),
});

export const GenerateCourseOutputSchema = z.object({
  title: z.string(),
  content: z.string(),
  quiz: z.array(CourseQuizQuestionSchema),
});
export type GenerateCourseOutput = z.infer<typeof GenerateCourseOutputSchema>;

export const GenerateCourseInputSchema = z.object({
  topic: z.string(),
  seed: z.string().optional().describe('An optional seed for controlling randomness and uniqueness.'),
  dificuldade: z.enum(['Fácil', 'Médio', 'Difícil']).optional(),
});
export type GenerateCourseInput = z.infer<typeof GenerateCourseInputSchema>;


// Password Reset
export const PasswordResetInputSchema = z.object({
  identifier: z.string().describe('The admin nickname or email to send the reset link to.'),
});
export type PasswordResetInput = z.infer<typeof PasswordResetInputSchema>;

export const PasswordResetOutputSchema = z.object({
    success: z.boolean(),
    message: z.string(),
});
export type PasswordResetOutput = z.infer<typeof PasswordResetOutputSchema>;


// Component-specific types
export type Course = GenerateCourseOutput & {
  id: string;
  points: number; // Manually added in the component
  dificuldade?: 'Fácil' | 'Médio' | 'Difícil';
};

export type QuizQuestion = z.infer<typeof QuizQuestionSchema>;

export type QuizResult = {
  score: number;
  total: number;
  date: string;
};

========================================
File: src/lib/utils.ts
========================================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

========================================
File: tailwind.config.ts
========================================
import type {Config} from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        body: ['Inter', 'sans-serif'],
        headline: ['Inter', 'sans-serif'],
        code: ['monospace'],
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
        sidebar: {
          DEFAULT: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config;

========================================
File: tsconfig.json
========================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

